/// <reference types="react" />
declare class Node {
    value: number;
    height: number;
    left: Node;
    right: Node;
    parent: Node;
    leftJSX: JSX.Element;
    rightJSX: JSX.Element;
    currentJSX: JSX.Element;
    constructor(value: number);
    insert(node: Node, isLeft: boolean): void;
    setJSX(): void;
    updateRootJSX(): void;
    setChildToNull(isLeft: boolean): void;
    setChildToChildsChild(isLeftChild: boolean, isLeft: boolean): void;
    remove(childrenCondtion?: string): void;
    updateValue(value: number): void;
    addHighlight(): void;
    clearHighlight(): void;
    balanceJSX(): void;
}
declare class AVL {
    root: Node;
    highlightedNode: Node;
    leafDepth: number;
    constructor(num?: number);
    rotateRight(node: Node): Node;
    rotateLeft(node: Node): Node;
    setHeight(node: Node): number;
    balanceCheck(node: Node): number;
    balance(node: Node): Node;
    findMax(node?: Node): any;
    findMin(node?: Node): any;
    insert(value: number): void;
    insertNode(node: Node, newNode: Node): Node;
    remove(value: number): void;
    removeNode(node: Node, value: number): Node;
    preorder(list: number[], node?: Node): void;
    inorder(list: number[], node?: Node): void;
    postorder(list: number[], node?: Node): void;
    search(value: number, node?: Node): any;
    generateRandomBST(num: number): void;
    checkAVL(): any[];
    isBalanced(node?: Node): any;
    isComplete(): any;
    isComplete2(index: number, totalNodes: number, node?: Node): any;
    isPerfect(): any;
    isPerfect2(node?: Node, depth?: number): any;
    isFull(node?: Node): any;
    countNodes(node?: Node): any;
    clearHighlight(): void;
}
export default AVL;
