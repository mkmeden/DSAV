/// <reference types="react" />
declare type Color = typeof RED | typeof BLACK;
declare const BLACK = 0;
declare const RED = 1;
declare class NullNode {
    color: number;
    isNull: boolean;
    parent: Node;
    currentJSX: JSX.Element;
    value: null;
    left: null;
    right: null;
    insert(): void;
    addHighlight(): void;
    constructor();
}
declare class Node {
    value: number;
    color: Color;
    right: Node | NullNode;
    left: Node | NullNode;
    parent: Node;
    isNull: boolean;
    currentJSX: JSX.Element;
    constructor(value: number);
    setHtml(): void;
    updateRootHtml(): void;
    insert(): void;
    addHighlight(): void;
    clearHighlight(): void;
}
declare class RBT {
    root: Node | NullNode;
    highlighted: Node;
    leafDepth: number;
    constructor(num?: number);
    rotateRight(node: Node, toRecolor: boolean): void;
    rotateLeft(node: Node, toRecolor: boolean): void;
    siblingOf(node: Node): NullNode | Node;
    findMin(node?: NullNode | Node): any;
    insert(value: number): void;
    insertNode(parent: Node, node: Node, value: number): any;
    remove(value: number, node?: NullNode | Node): void;
    deleteOneChild(node: Node): void;
    deleteCase1(node: Node): void;
    deleteCase2(node: Node): void;
    deleteCase3(node: Node): void;
    deleteCase4(node: Node): void;
    deleteCase5(node: Node): void;
    deleteCase6(node: Node): void;
    replaceChild(child: Node, node: Node): void;
    preorder(list: number[], node?: NullNode | Node): void;
    inorder(list: number[], node?: NullNode | Node): void;
    postorder(list: number[], node?: NullNode | Node): void;
    search(value: number, node?: NullNode | Node): any;
    generateRandomBST(num: number): void;
    checkBinaryTree(): any[];
    isBalanced(node?: NullNode | Node): any;
    height(node?: NullNode | Node): number;
    isComplete(): any;
    isComplete2(index: number, totalNodes: number, node?: NullNode | Node): any;
    isPerfect(): any;
    isPerfect2(node?: NullNode | Node, depth?: number): any;
    isFull(node?: NullNode | Node): any;
    countNodes(node?: NullNode | Node): any;
    clearHighlight(): void;
}
export default RBT;
