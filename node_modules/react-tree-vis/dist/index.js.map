{"version":3,"file":"index.js","sources":["../src/constants.ts","../src/data-structures/BSTree.tsx","../src/hooks/useTreeState.ts","../src/hooks/useTreeStyle.ts","../node_modules/style-inject/dist/style-inject.es.js","../src/util.ts","../src/components/BinarySearchTree.tsx","../src/AllWords.ts","../src/data-structures/Trie.tsx","../src/components/Trie.tsx","../src/data-structures/AVLTree.tsx","../src/components/AVLTree.tsx","../src/data-structures/RedBlackTree.tsx","../src/components/RedBlackTree.tsx","../node_modules/tslib/tslib.es6.js","../src/data-structures/Heap.tsx","../src/components/MinHeap.tsx","../src/components/MaxHeap.tsx","../src/hooks/useSelfBalancingTree.tsx","../src/hooks/useBinarySearchTree.ts","../src/hooks/useHeap.ts","../src/hooks/useTrie.ts"],"sourcesContent":["import { TableDataType } from './types'\n\nexport const INORDER_KEY = 'inorder'\nexport const POSTORDER_KEY = 'postorder'\nexport const PREORDER_KEY = 'preorder'\n\nexport const BINARY_TREE_TYPE = {\n  BALANCED: 'balanced',\n  COMPLETE: 'complete',\n  PERFECT: 'perfect',\n  FULL: 'full',\n}\n\nexport const TREE_ID = 'react-tree-vis'\n\nexport const CSS_VARIABLE_MAP = {\n  lineColor: {\n    variableName: '--line-color',\n    defaultValue: '#ccc',\n    description: 'Color of the line connecting nodes',\n  },\n  lineHoverColor: {\n    variableName: '--line-hover-color',\n    defaultValue: '#5f6674',\n    description: 'Hover color of the line connecting nodes',\n  },\n  lineRadius: {\n    variableName: '--line-radius',\n    defaultValue: '5px',\n    description: 'Radius of curves in the line',\n  },\n  nodeBorder: {\n    variableName: '--node-border',\n    defaultValue: 'none',\n    description:\n      'Border style of the nodes. Syntax of short-hand CSS border property is accepted here.',\n  },\n  nodeBorderRadius: {\n    variableName: '--node-border-radius',\n    defaultValue: '200px',\n    description: '',\n  },\n  nodeBackgroundColor: {\n    variableName: '--node-bg-color',\n    defaultValue: '#fff',\n    description: '',\n  },\n  nodeFontColor: {\n    variableName: '--node-font-color',\n    defaultValue: '#666',\n    description: '',\n  },\n  nodeShadow: {\n    variableName: '--node-shadow',\n    defaultValue: '-5px -5px 20px #fff, 5px 5px 20px #babecc',\n    description: 'Syntax of short-hand CSS shadow property accepted here.',\n  },\n  nodeTextShadow: {\n    variableName: '--node-text-shadow',\n    defaultValue: 'none',\n    description: 'Syntax of short-hand CSS shadow property accepted here.',\n  },\n  nodeFontSize: {\n    variableName: '--node-font-size',\n    defaultValue: '20px',\n    description: '',\n  },\n  nodeFontFamily: {\n    variableName: '--node-font-family',\n    defaultValue: 'arial, verdana, tahoma',\n    description: '',\n  },\n  nodeAvlHeightFontSize: {\n    variableName: '--node-avl-height-font-size',\n    defaultValue: '13px',\n    description: '',\n  },\n  nodeRedBackgroundColor: {\n    variableName: '--node-red-bg-color',\n    defaultValue: '#da606066',\n    description: '',\n  },\n  nodeBlackBackgroundColor: {\n    variableName: '--node-black-bg-color',\n    defaultValue: '#acacac66',\n    description: '',\n  },\n  nodeHighlightBorder: {\n    variableName: '--node-hl-border',\n    defaultValue: 'none',\n    description: 'Syntax of short-hand CSS border property is accepted here.',\n  },\n  nodeHighlightBackgroundColor: {\n    variableName: '--node-hl-bg-color',\n    defaultValue: '#fff',\n    description: '',\n  },\n  nodeHighlightFontColor: {\n    variableName: '--node-hl-font-color',\n    defaultValue: '#fff',\n    description: '',\n  },\n  nodeHighlightShadow: {\n    variableName: '--node-hl-shadow',\n    defaultValue: '-5px -5px 20px #fff, 5px 5px 20px #babecc',\n    description: 'Syntax of short-hand CSS shadow property accepted here.',\n  },\n  nodeHighlightTextShadow: {\n    variableName: '--node-hl-text-shadow',\n    defaultValue:\n      '0 0 5px #fff, 0 0 10px #fff, 0 0 15px #00ff15, 0 0 20px #00ff15, 0 0 25px #00ff15, 0 0 30px #00ff15, 0 0 35px #00ff15',\n    description: 'Syntax of short-hand CSS shadow property accepted here.',\n  },\n  nodeHoverBorder: {\n    variableName: '--node-hover-border',\n    defaultValue: 'none',\n    description: 'Syntax of short-hand CSS border property is accepted here.',\n  },\n  nodeHoverBackgroundColor: {\n    variableName: '--node-hover-bg-color',\n    defaultValue: '#fff',\n    description: '',\n  },\n  nodeHoverFontColor: {\n    variableName: '--node-hover-font-color',\n    defaultValue: '#002574',\n    description: '',\n  },\n  nodeHoverShadow: {\n    variableName: '--node-hover-shadow',\n    defaultValue: '-1px -1px 5px #fff, 1px 1px 5px #babecc',\n    description: 'Syntax of short-hand CSS shadow property accepted here.',\n  },\n  nodeHoverTextShadow: {\n    variableName: '--node-hover-text-shadow',\n    defaultValue: 'none',\n    description: 'Syntax of short-hand CSS shadow property accepted here.',\n  },\n  nodeNullFontColor: {\n    variableName: '--node-null-font-color',\n    defaultValue: '#7c7c7c2f',\n    description: '',\n  },\n  nodeNullHoverFontColor: {\n    variableName: '--node-null-hover-font-color',\n    defaultValue: '#ff0000b9',\n    description: '',\n  },\n  transitionDuration: {\n    variableName: '--transition',\n    defaultValue: '0.5s',\n    description: '',\n  },\n}\n\nexport const AVL_TREE_PROPS: TableDataType = {\n  head: ['Prop', 'Type', 'Required', 'Description'],\n  body: [\n    [\n      '<code>ref</code>',\n      '<code>React.MutableRefObject&lt;any&gt;</code>',\n      '❌',\n      'Allows interaction with AVLTree component. <code>ref</code> object passed, is obtained from <code>useAVLTree()</code>.',\n    ],\n    [\n      '<code>data</code>',\n      '<code>number[]</code>',\n      '❌',\n      'Elements in the array are inserted into the tree on mount.',\n    ],\n    [\n      '<code>treeStyles</code>',\n      '<code>object</code>',\n      '❌',\n      'Allows overriding default style of the component. Checkout treeStyles object story under STYLES for more info.',\n    ],\n  ],\n}\n\nexport const RED_BLACK_TREE_PROPS: TableDataType = {\n  head: ['Prop', 'Type', 'Required', 'Description'],\n  body: [\n    [\n      '<code>ref</code>',\n      '<code>React.MutableRefObject&lt;any&gt;</code>',\n      '❌',\n      'Allows interaction with RedBlackTree component. <code>ref</code> object passed, is obtained from <code>useRedBlackTree()</code>.',\n    ],\n    [\n      '<code>data</code>',\n      '<code>number[]</code>',\n      '❌',\n      'Elements in the array are inserted into the tree on mount.',\n    ],\n    [\n      '<code>treeStyles</code>',\n      '<code>object</code>',\n      '❌',\n      'Allows overriding default style of the component. Checkout treeStyles object story under STYLES for more info.',\n    ],\n  ],\n}\n\nexport const BINARY_SEARCH_TREE_PROPS: TableDataType = {\n  head: ['Prop', 'Type', 'Required', 'Description'],\n  body: [\n    [\n      '<code>ref</code>',\n      '<code>React.MutableRefObject&lt;any&gt;</code>',\n      '❌',\n      'Allows interaction with BST component. <code>ref</code> object passed, is obtained from <code>useBinarySearchTree()</code>.',\n    ],\n    [\n      '<code>data</code>',\n      '<code>number[]</code>',\n      '❌',\n      'Elements in the array are inserted into the tree on mount.',\n    ],\n    [\n      '<code>treeStyles</code>',\n      '<code>object</code>',\n      '❌',\n      'Allows overriding default style of the component. Checkout treeStyles object story under STYLES for more info.',\n    ],\n  ],\n}\n\nexport const HEAP_PROPS: TableDataType = {\n  head: ['Prop', 'Type', 'Required', 'Description'],\n  body: [\n    [\n      '<code>ref</code>',\n      '<code>React.MutableRefObject&lt;any&gt;</code>',\n      '❌',\n      'Allows interaction with Heap component. <code>ref</code> object passed, is obtained from <code>useHeap()</code>.',\n    ],\n    [\n      '<code>data</code>',\n      '<code>number[]</code>',\n      '❌',\n      'Elements in the array are inserted into the tree on mount.',\n    ],\n    [\n      '<code>treeStyles</code>',\n      '<code>object</code>',\n      '❌',\n      'Allows overriding default style of the component. Checkout treeStyles object story under STYLES for more info.',\n    ],\n  ],\n}\n\nexport const TRIE_PROPS: TableDataType = {\n  head: ['Prop', 'Type', 'Required', 'Description'],\n  body: [\n    [\n      '<code>ref</code>',\n      '<code>React.MutableRefObject&lt;any&gt;</code>',\n      '❌',\n      'Allows interaction with Trie component. <code>ref</code> object passed, is obtained from <code>useTrie()</code>.',\n    ],\n    [\n      '<code>data</code>',\n      '<code>string[]</code>',\n      '❌',\n      'Elements in the array are inserted into the trie on mount.',\n    ],\n    [\n      '<code>treeStyles</code>',\n      '<code>object</code>',\n      '❌',\n      'Allows overriding default style of the component. Checkout treeStyles object story under STYLES for more info.',\n    ],\n  ],\n}\n\nexport const AVL_HOOK_PROPERTIES: TableDataType = {\n  head: ['Property', 'Type', 'Description'],\n  body: [\n    [\n      '<code>ref</code>',\n      '<code>React.MutableRefObject&lt;any&gt;</code>',\n      'Pass this ref object to your tree component. It binds the functions returned by this hook to that component.',\n    ],\n    [\n      '<code>insert</code>',\n      '<code>(value: number) => void</code>',\n      'Inserts the value',\n    ],\n    [\n      '<code>remove</code>',\n      '<code>(value: number) => boolean</code>',\n      'removes the value',\n    ],\n    [\n      '<code>search</code>',\n      '<code>(value: number) => boolean</code>',\n      'Searches the value and returns true if found. Also, node found is highlighted',\n    ],\n    [\n      '<code>getData</code>',\n      '<code>(traversalOrder: TraversalOrderType) => number[]</code>',\n      'Returns traversal of the tree',\n    ],\n    ['<code>clear</code>', '<code>() => void</code>', 'Removes all nodes '],\n    [\n      '<code>generateRandomTree</code>',\n      '<code>(countOfNodes: number) => void</code>',\n      'Removes all nodes and inserts countOfNodes random values.',\n    ],\n    [\n      '<code>checkTreeType</code>',\n      '<code>() => BinaryTreeCheckType[]</code>',\n      'Checks whether the current tree is balanced, complete, perfect or full',\n    ],\n  ],\n}\n\nexport const BINARY_SEARCH_TREE_HOOK_PROPERTIES: TableDataType = {\n  head: ['Property', 'Type', 'Description'],\n  body: [\n    [\n      '<code>ref</code>',\n      '<code>React.MutableRefObject&lt;any&gt;</code>',\n      'Pass this ref object to your tree component. It binds the functions returned by this hook to that component.',\n    ],\n    [\n      '<code>insert</code>',\n      '<code>(value: number) => void</code>',\n      'Inserts the value',\n    ],\n    [\n      '<code>remove</code>',\n      '<code>(value: number) => boolean</code>',\n      'removes the value',\n    ],\n    [\n      '<code>search</code>',\n      '<code>(value: number) => boolean</code>',\n      'Searches the value and returns true if found. Also, node found is highlighted',\n    ],\n    [\n      '<code>getData</code>',\n      '<code>(traversalOrder: TraversalOrderType) => number[]</code>',\n      'Returns traversal of the tree',\n    ],\n    ['<code>clear</code>', '<code>() => void</code>', 'Removes all nodes'],\n    ['<code>balance</code>', '<code>() => void</code>', '\tBalances the tree'],\n    [\n      '<code>generateRandomTree</code>',\n      '<code>(countOfNodes: number) => void</code>',\n      'Removes all nodes and inserts countOfNodes random values.',\n    ],\n    [\n      '<code>checkTreeType</code>',\n      '<code>() => BinaryTreeCheckType[]</code>',\n      'Checks whether the current tree is balanced, complete, perfect or full',\n    ],\n  ],\n}\n\nexport const HEAP_HOOK_PROPERTIES: TableDataType = {\n  head: ['Property', 'Type', 'Description'],\n  body: [\n    [\n      '<code>ref</code>',\n      '<code>React.MutableRefObject&lt;any&gt;</code>',\n      'Pass this ref object to your tree component. It binds the functions returned by this hook to that component.',\n    ],\n    [\n      '<code>insert</code>',\n      '<code>(value: number) => void</code>',\n      'Inserts the value',\n    ],\n    [\n      '<code>remove</code>',\n      '<code>(value: number) => boolean</code>',\n      'removes the value',\n    ],\n    [\n      '<code>getData</code>',\n      '<code>() => number[]</code>',\n      'Returns internal array used to create heap',\n    ],\n    ['<code>clear</code>', '<code>() => void</code>', 'Removes all nodes '],\n    [\n      '<code>generateRandomTree</code>',\n      '<code>(countOfNodes: number) => void</code>',\n      'Removes all nodes and inserts countOfNodes random values.',\n    ],\n    [\n      '<code>extractTop</code>',\n      '<code>() => number</code>',\n      'Extracts the top most value from the heap and returns it',\n    ],\n  ],\n}\n\nexport const TRIE_HOOK_PROPERTIES: TableDataType = {\n  head: ['Property', 'Type', 'Description'],\n  body: [\n    [\n      '<code>ref</code>',\n      '<code>React.MutableRefObject&lt;any&gt;</code>',\n      'Pass this ref object to your Trie component. It binds the functions returned by this hook to that component.',\n    ],\n    [\n      '<code>insert</code>',\n      '<code>(word: string) => void</code>',\n      'Inserts the word',\n    ],\n    [\n      '<code>remove</code>',\n      '<code>(word: string) => boolean</code>',\n      'removes the word',\n    ],\n    [\n      '<code>search</code>',\n      '<code>(word: string) => boolean</code>',\n      'Searches the word and returns true if found. Also, the nodes are highlighted.',\n    ],\n    [\n      '<code>searchPrefix</code>',\n      '<code>(word: string) => boolean</code>',\n      'Searches the prefix and return true if full prefix is present. Also, the nodes are highlighted.',\n    ],\n    [\n      '<code>getAllWords</code>',\n      '<code>() => string[]</code>',\n      'Returns an array of all the words in trie',\n    ],\n    [\n      '<code>generateRandomTrie</code>',\n      '<code>(countOfWords: number) => void</code>',\n      'Removes all nodes and inserts countOfNodes random words.',\n    ],\n    [\n      '<code>removeHighlight</code>',\n      '<code>() => void</code>',\n      'Removes highlight from all the nodes, if any',\n    ],\n  ],\n}\n","import React from 'react'\nimport { BINARY_TREE_TYPE } from '../constants'\nimport { BinaryTreeCheckType } from '../types'\n\nconst LEFT = 'left'\nconst RIGHT = 'right'\n\nconst NULL_NODE_JSX = (\n  <li className=\"null\">\n    <div>null</div>\n  </li>\n)\n\nconst getNormalNodeJSX = (\n  value: number,\n  leftJSX: JSX.Element,\n  rightJSX: JSX.Element,\n  isHighlighted = false,\n) => (\n  <li key={value}>\n    <div className={`normal ${isHighlighted ? 'highlight' : ''}`}>{value}</div>\n    <ul>\n      {leftJSX} {rightJSX}\n    </ul>\n  </li>\n)\n\nexport class Node {\n  value: number\n  left: Node\n  right: Node\n  parent: Node\n  leftJSX: JSX.Element\n  rightJSX: JSX.Element\n  currentJSX: JSX.Element\n\n  constructor(value: number) {\n    this.value = value\n    this.left = null\n    this.right = null\n    this.parent = null\n    this.leftJSX = NULL_NODE_JSX\n    this.rightJSX = NULL_NODE_JSX\n    this.currentJSX = getNormalNodeJSX(this.value, this.leftJSX, this.rightJSX)\n  }\n\n  //Inserts a node in JSX\n  insert(node: Node, isLeft: boolean): void {\n    const newJSX = node.currentJSX\n\n    if (isLeft) {\n      this.leftJSX = newJSX\n    } else {\n      this.rightJSX = newJSX\n    }\n    this.setJSX()\n    this.updateRootJSX()\n  }\n\n  //Updates JSX for the node\n  setJSX(): void {\n    this.currentJSX = getNormalNodeJSX(this.value, this.leftJSX, this.rightJSX)\n  }\n\n  //Updates the whole JSX\n  updateRootJSX(): void {\n    if (this.parent !== null) {\n      if (this.parent.left === this) this.parent.insert(this, true)\n      else this.parent.insert(this, false)\n    }\n  }\n\n  //Sets one child to null\n  setChildToNull(isLeft: boolean): void {\n    if (isLeft) this.leftJSX = NULL_NODE_JSX\n    else this.rightJSX = NULL_NODE_JSX\n    this.setJSX()\n    this.updateRootJSX()\n  }\n\n  //Sets grandchild to child\n  setChildToChildsChild(isLeftChild: boolean, isLeft: boolean): void {\n    if (isLeftChild) {\n      if (isLeft) {\n        this.leftJSX = this.left.left.currentJSX\n        this.setJSX()\n      } else {\n        this.leftJSX = this.left.right.currentJSX\n        this.setJSX()\n      }\n    } else {\n      if (isLeft) {\n        this.rightJSX = this.right.left.currentJSX\n        this.setJSX()\n      } else {\n        this.rightJSX = this.right.right.currentJSX\n\n        this.setJSX()\n      }\n    }\n    this.updateRootJSX()\n  }\n\n  //Removes a node from JSX\n  remove(childrenCondtion: string): void {\n    if (!this.parent) return\n    if (!childrenCondtion) {\n      if (this.parent.left === this) {\n        this.parent.setChildToNull(true)\n      } else {\n        this.parent.setChildToNull(false)\n      }\n    } else if (childrenCondtion === LEFT) {\n      if (this.parent.left === this) {\n        this.parent.setChildToChildsChild(true, true)\n      } else {\n        this.parent.setChildToChildsChild(false, true)\n      }\n    } else {\n      if (this.parent.left === this) {\n        this.parent.setChildToChildsChild(true, false)\n      } else {\n        this.parent.setChildToChildsChild(false, false)\n      }\n    }\n  }\n\n  //Updates the value of a node\n  updateValue(value: number): void {\n    this.value = value\n    this.setJSX()\n    this.updateRootJSX()\n  }\n\n  //Adds highlight to a node when searched\n  addHighlight(): void {\n    this.currentJSX = getNormalNodeJSX(\n      this.value,\n      this.leftJSX,\n      this.rightJSX,\n      true,\n    )\n    this.updateRootJSX()\n  }\n\n  //Removes the highlight\n  clearHighlight(): void {\n    this.setJSX()\n\n    this.updateRootJSX()\n  }\n\n  //Changes the JSX when tree is balanced\n  balanceJSX(): void {\n    if (!this.left && this.right) {\n      this.rightJSX = this.right.currentJSX\n      this.setChildToNull(true)\n    } else if (!this.right && this.left) {\n      this.leftJSX = this.left.currentJSX\n      this.setChildToNull(false)\n    } else if (this.right && this.left) {\n      this.leftJSX = this.left.currentJSX\n      this.rightJSX = this.right.currentJSX\n      this.setJSX()\n      this.updateRootJSX()\n    } else {\n      this.leftJSX = NULL_NODE_JSX\n      this.rightJSX = NULL_NODE_JSX\n      this.setJSX()\n      this.updateRootJSX()\n    }\n  }\n}\n\nclass BST {\n  root: Node\n  highlightedNode: Node\n  leafDepth: number\n\n  constructor(num = 0) {\n    this.root = null\n    if (num) {\n      this.generateRandomBST(num)\n    }\n    this.highlightedNode = null\n    this.leafDepth = -1\n  }\n\n  //inserting a new node\n  insert(value: number): void {\n    this.clearHighlight()\n    const newNode = new Node(value)\n    if (this.root === null) {\n      this.root = newNode\n    } else this.insertNode(this.root, newNode)\n  }\n\n  insertNode(node: Node, newNode: Node): void {\n    if (newNode.value < node.value) {\n      if (node.left === null) {\n        node.left = newNode\n        newNode.parent = node\n        node.insert(newNode, true)\n      } else this.insertNode(node.left, newNode)\n    } else {\n      if (node.right === null) {\n        node.right = newNode\n        newNode.parent = node\n        node.insert(newNode, false)\n      } else this.insertNode(node.right, newNode)\n    }\n  }\n\n  //Finding max value\n  findMax(node = this.root): Node {\n    if (node == null) return node\n    else if (node.right == null) {\n      return node\n    } else {\n      return this.findMax(node.right)\n    }\n  }\n\n  //Finding min value\n  findMin(node = this.root): Node {\n    if (node == null) return node\n    else if (node.left == null) {\n      return node\n    } else {\n      return this.findMin(node.left)\n    }\n  }\n\n  //Deleting node\n  remove(value: number): void {\n    this.clearHighlight()\n    this.root = this.removeNode(this.root, value)\n  }\n\n  // TODO: Probably returning a node is not required, handling it simialr to insert function\n  removeNode(node: Node, value: number): Node {\n    if (node === null) return null\n    else if (value < node.value) {\n      node.left = this.removeNode(node.left, value)\n      return node\n    } else if (value > node.value) {\n      node.right = this.removeNode(node.right, value)\n      return node\n    } else {\n      if (node.left === null && node.right === null) {\n        node.remove(null)\n        node = null\n        return node\n      }\n      if (node.left === null) {\n        node.remove(RIGHT)\n        node.right.parent = node.parent\n        node = node.right\n        return node\n      } else if (node.right === null) {\n        node.remove(LEFT)\n        node.left.parent = node.parent\n        node = node.left\n        return node\n      }\n      const minNodeOfRight = this.findMin(node.right)\n      node.updateValue(minNodeOfRight.value)\n\n      node.right = this.removeNode(node.right, minNodeOfRight.value)\n      return node\n    }\n  }\n\n  //Find height\n  height(node = this.root): number {\n    if (node === null) return -1\n    let ans: number\n    ans = this.height(node.left)\n    ans = Math.max(this.height(node.right), ans)\n    return ans + 1\n  }\n\n  //Count number of nodes\n  countNodes(node = this.root): number {\n    if (node === null) return 0\n    return this.countNodes(node.left) + 1 + this.countNodes(node.right)\n  }\n\n  //BST traversal\n  preorder(list: number[], node = this.root): void {\n    if (node !== null) {\n      list.push(node.value)\n      this.preorder(list, node.left)\n      this.preorder(list, node.right)\n    }\n  }\n\n  inorder(list: number[], node = this.root): void {\n    if (node !== null) {\n      this.inorder(list, node.left)\n      list.push(node.value)\n      this.inorder(list, node.right)\n    }\n  }\n\n  postorder(list: number[], node = this.root): void {\n    if (node !== null) {\n      this.postorder(list, node.left)\n      this.postorder(list, node.right)\n      list.push(node.value)\n    }\n  }\n\n  //Search\n  search(value: number, node = this.root): boolean {\n    this.clearHighlight()\n\n    if (node === null) return false\n    else if (node.value === value) {\n      node.addHighlight()\n      this.highlightedNode = node\n      return true\n    } else if (node.value > value) return this.search(value, node.left)\n    else return this.search(value, node.right)\n  }\n\n  //Random Tree generator\n  generateRandomBST(num: number): void {\n    const upper = 0\n    const lower = num * 2 + 10\n    const elements = new Set()\n    for (let i = 0; i < num; i++) {\n      let value = Math.floor(Math.random() * (upper - lower + 1)) + lower\n      while (elements.has(value)) {\n        value = Math.floor(Math.random() * (upper - lower + 1)) + lower\n      }\n      elements.add(value)\n      this.insert(value)\n    }\n  }\n\n  //BST Checker\n  //Main Checker function\n  checkBST(): BinaryTreeCheckType[] {\n    const { BALANCED, COMPLETE, FULL, PERFECT } = BINARY_TREE_TYPE\n    const BSTTypeList: BinaryTreeCheckType[] = []\n    if (this.isBalanced()) {\n      BSTTypeList.push(BALANCED)\n    }\n    if (this.isComplete()) {\n      BSTTypeList.push(COMPLETE)\n    }\n    if (this.isPerfect()) {\n      BSTTypeList.push(FULL)\n    }\n    if (this.isFull()) {\n      BSTTypeList.push(PERFECT)\n    }\n    return BSTTypeList\n  }\n\n  //Subfunctions\n  //balance\n  isBalanced(node = this.root): boolean {\n    if (node === null) return true\n    const leftHeight = this.height(node.left)\n    const rightHeight = this.height(node.right)\n    if (Math.abs(leftHeight - rightHeight) <= 1) {\n      return this.isBalanced(node.left) && this.isBalanced(node.right)\n    } else {\n      return false\n    }\n  }\n\n  //complete\n  isComplete(): boolean {\n    const totalNodes = this.countNodes()\n    return this.isComplete2(0, totalNodes)\n  }\n  isComplete2(index: number, totalNodes: number, node = this.root): boolean {\n    if (node === null) return true\n    else if (index >= totalNodes) return false\n    else {\n      let ans = this.isComplete2(index * 2 + 1, totalNodes, node.left)\n      ans &&= this.isComplete2(index * 2 + 2, totalNodes, node.right)\n      return ans\n    }\n  }\n\n  //perfect\n  isPerfect(): boolean {\n    if (!this.isFull() || !this.isComplete()) return false\n    return this.isPerfect2()\n  }\n\n  isPerfect2(node = this.root, depth = 0): boolean {\n    if (!node) return true\n    depth++\n    if (!node.right && !node.left) {\n      if (this.leafDepth !== -1 && this.leafDepth !== depth) return false\n      this.leafDepth = depth\n    }\n    return (\n      this.isPerfect2(node.left, depth) && this.isPerfect2(node.right, depth)\n    )\n  }\n\n  //full\n  isFull(node = this.root): boolean {\n    if (node === null) return true\n    else if (node.left === null && node.right === null) return true\n    else if (node.left !== null && node.right !== null) {\n      let ans: boolean\n      ans = this.isFull(node.left)\n      ans &&= this.isFull(node.right)\n      return ans\n    } else return false\n  }\n\n  //Balancing BST\n  // TODO: improve the algorithm, it does not work for repeated values\n  balance(node = this.root): void {\n    this.clearHighlight()\n    const nodes: Node[] = []\n    this.BSTToArr(node, nodes)\n    const length = nodes.length\n    this.root = null\n\n    this.makeBST(nodes, 0, length - 1)\n  }\n\n  //Balancing sub functions\n  BSTToArr(node: Node, nodes: Node[]): void {\n    if (node !== null) {\n      this.BSTToArr(node.left, nodes)\n      nodes.push(node)\n      this.BSTToArr(node.right, nodes)\n    }\n  }\n\n  //making BST from array\n  makeBST(nodes: Node[], start: number, end: number): void {\n    if (start > end) {\n      return\n    }\n    const mid = Math.floor((start + end) / 2)\n    this.insert(nodes[mid].value)\n    this.makeBST(nodes, start, mid - 1)\n    this.makeBST(nodes, mid + 1, end)\n  }\n\n  clearHighlight(): void {\n    if (this.highlightedNode) {\n      this.highlightedNode.clearHighlight()\n      this.highlightedNode = null\n    }\n  }\n}\n\nexport default BST\n","import { useState } from 'react'\nimport BST from '../data-structures/BSTree'\n\ntype ReturnType<TreeType> = {\n  tree: TreeType\n  treeJSX: JSX.Element\n  setTree: (newTreeObject: TreeType) => void\n}\n\nfunction useTreeState<TreeType = BST>(\n  treeObject: TreeType,\n): ReturnType<TreeType> {\n  const [tree, setTreeInternal] = useState<TreeType>(treeObject)\n  const [treeJSX, setTreeJSX] = useState<JSX.Element>(\n    (treeObject as any)?.root.currentJSX,\n  )\n  const setTree = (newTreeObject: TreeType) => {\n    setTreeInternal(newTreeObject)\n    setTreeJSX(\n      (newTreeObject as any)?.root?.currentJSX ||\n        (newTreeObject as any)?.currentJSX,\n    )\n  }\n  return { tree, treeJSX, setTree }\n}\n\nexport default useTreeState\n","import { useEffect } from 'react'\nimport { CSS_VARIABLE_MAP, TREE_ID } from '../constants'\nimport { TreeStylesType } from '../types'\n\nconst useTreeStyle = (treeStyles: TreeStylesType): void => {\n  const handleStyles = () => {\n    if (!treeStyles) return\n    for (const [style, value] of Object.entries(treeStyles)) {\n      document\n        .getElementById(TREE_ID)\n        .style.setProperty(CSS_VARIABLE_MAP[style].variableName, value)\n    }\n  }\n  useEffect(() => {\n    handleStyles()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [treeStyles])\n}\nexport default useTreeStyle\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { CSS_VARIABLE_MAP } from './constants'\nimport { TableDataType } from './types'\n\nexport const compareArray = (array1: any[], array2: any[]): boolean => {\n  if (array1.length !== array2.length) return false\n  for (let i = 0; i < array1.length; i++) {\n    if (array1[i] !== array2[i]) return false\n  }\n  return true\n}\n\nexport const handleStyleArgTypes = (): Record<string, any> => {\n  const argTypes = {}\n  for (const [style, { defaultValue }] of Object.entries(CSS_VARIABLE_MAP)) {\n    argTypes[style] = {\n      control: {\n        type: style.includes('Color') ? 'color' : 'text',\n      },\n      defaultValue,\n    }\n  }\n  return argTypes\n}\n\nexport const getTreeStylesInTableDataFormat = () => {\n  const data: TableDataType = { head: [], body: [] }\n  data.head = ['Property', 'Type', 'Description', 'Default']\n  data.body = Object.entries(CSS_VARIABLE_MAP).map(\n    ([key, { description, defaultValue }]) => [\n      `<code>${key}</code>`,\n      '<code>string</code>',\n      description,\n      `<code>${defaultValue}</code>`,\n    ],\n  )\n  return data\n}\n","import React, { forwardRef, useEffect, useImperativeHandle } from 'react'\nimport { TREE_ID } from '../constants'\nimport BST from '../data-structures/BSTree'\nimport useTreeState from '../hooks/useTreeState'\nimport useTreeStyle from '../hooks/useTreeStyle'\nimport '../styles/BinarySearchTree.css'\nimport {\n  BinaryTreeCheckType,\n  BinaryTreeRefType,\n  TraversalOrderType,\n  TreeStylesType,\n} from '../types'\nimport { compareArray } from '../util'\n\ntype BSTProps = {\n  data?: number[]\n  treeStyles?: TreeStylesType\n}\n\nconst BinarySearchTree: React.ForwardRefRenderFunction<\n  BinaryTreeRefType,\n  BSTProps\n> = (\n  { data, treeStyles }: BSTProps,\n  ref: React.MutableRefObject<BinaryTreeRefType>,\n) => {\n  const { tree, treeJSX, setTree } = useTreeState(null)\n  useTreeStyle(treeStyles)\n\n  useImperativeHandle(ref, () => ({\n    insert: (value: number) => {\n      // if tree is empty\n      if (!tree?.root) {\n        const newTree = new BST()\n        newTree.insert(value)\n        setTree(newTree)\n        return\n      }\n\n      tree.insert(value)\n      setTree(tree)\n    },\n    remove: (value: number): boolean => {\n      if (!tree?.root) return false\n\n      if (!tree.search(value)) return false\n      tree.remove(value)\n      setTree(tree.root ? tree : null)\n      return true\n    },\n    search: (value: number): boolean => {\n      if (!tree?.root) return false\n      const foundNode = tree.search(value)\n      if (foundNode) setTree(tree)\n      return foundNode\n    },\n    getData: (traversalOrder: TraversalOrderType): number[] => {\n      const traversalData = []\n      tree[traversalOrder](traversalData)\n      return traversalData\n    },\n    clear: () => {\n      setTree(new BST())\n    },\n    balance: () => {\n      tree.balance()\n      setTree(tree)\n    },\n    generateRandomTree: (countOfNodes: number) => {\n      const newTree = new BST(countOfNodes)\n      setTree(newTree)\n    },\n    checkTreeType: (): BinaryTreeCheckType[] => {\n      return tree.checkBST()\n    },\n  }))\n\n  const handleData = () => {\n    const newTree = new BST()\n    data.forEach((elem) => newTree.insert(elem))\n    setTree(newTree)\n  }\n\n  useEffect(() => {\n    if (data) handleData()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data])\n\n  return (\n    <div id={TREE_ID}>\n      <ul>{treeJSX}</ul>\n    </div>\n  )\n}\n\n// returns true if data has changed\nconst compareBinarySearchTree = (previousPros: BSTProps, newProps: BSTProps) =>\n  previousPros.data &&\n  newProps.data &&\n  compareArray(previousPros.data, newProps.data)\n\nexport default React.memo(forwardRef(BinarySearchTree), compareBinarySearchTree)\n","const words = {\n  words: [\n    'step',\n    'tremble',\n    'dinner',\n    'gigantic',\n    'elated',\n    'torpid',\n    'crook',\n    'throat',\n    'equal',\n    'sum',\n    'marked',\n    'suggestion',\n    'dapper',\n    'afford',\n    'happy',\n    'mist',\n    'robin',\n    'spot',\n    'reaction',\n    'crayon',\n    'irritate',\n    'tightfisted',\n    'warlike',\n    'difficult',\n    'distinct',\n    'share',\n    'spiffy',\n    'suspend',\n    'base',\n    'squeak',\n    'abundant',\n    'unlock',\n    'spiritual',\n    'amuse',\n    'chance',\n    'crowded',\n    'friendly',\n    'shade',\n    'telephone',\n    'pig',\n    'parcel',\n    'part',\n    'follow',\n    'amount',\n    'earthy',\n    'collect',\n    'sort',\n    'drunk',\n    'blow',\n    'division',\n    'curve',\n    'seed',\n    'sniff',\n    'greet',\n    'workable',\n    'small',\n    'detect',\n    'week',\n    'day',\n    'truthful',\n    'milk',\n    'spotless',\n    'coat',\n    'escape',\n    'debt',\n    'optimal',\n    'jar',\n    'quixotic',\n    'lick',\n    'inconclusive',\n    'bruise',\n    'maid',\n    'laugh',\n    'scare',\n    'perform',\n    'chivalrous',\n    'nonstop',\n    'spiteful',\n    'ignore',\n    'toothbrush',\n    'promise',\n    'redundant',\n    'impulse',\n    'value',\n    'chalk',\n    'appear',\n    'sloppy',\n    'hook',\n    'breathe',\n    'wakeful',\n    'supreme',\n    'cat',\n    'arm',\n    'settle',\n    'orange',\n    'zoom',\n    'territory',\n    'damaging',\n    'deliver',\n    'children',\n    'protect',\n    'test',\n    'cracker',\n    'loutish',\n    'disapprove',\n    'clover',\n    'fry',\n    'blink',\n    'snails',\n    'neck',\n    'experience',\n    'boy',\n    'rely',\n    'expert',\n    'sulky',\n    'things',\n    'nation',\n    'jewel',\n    'crowd',\n    'tan',\n    'uncovered',\n    'abrupt',\n    'sad',\n    'rambunctious',\n    'pricey',\n    'slim',\n    'skinny',\n    'scissors',\n    'hour',\n    'cuddly',\n    'potato',\n    'lively',\n    'dirt',\n    'receipt',\n    'great',\n    'heap',\n    'cherries',\n    'lowly',\n    'wide',\n    'cowardly',\n    'insect',\n    'behave',\n    'zephyr',\n    'parallel',\n    'interfere',\n    'acoustics',\n    'head',\n    'stir',\n    'increase',\n    'steady',\n    'insurance',\n    'dashing',\n    'shrug',\n    'babies',\n    'efficient',\n    'chilly',\n    'puncture',\n    'excuse',\n    'advice',\n    'example',\n    'tin',\n    'dry',\n    'substance',\n    'jazzy',\n    'employ',\n    'lonely',\n    'reduce',\n    'majestic',\n    'spicy',\n    'gaudy',\n    'wealthy',\n    'rush',\n    'channel',\n    'harm',\n    'quirky',\n    'brief',\n    'stamp',\n    'thought',\n    'blot',\n    'shop',\n    'relax',\n    'destruction',\n    'zebra',\n    'fairies',\n    'wish',\n    'wobble',\n    'wail',\n    'light',\n    'growth',\n    'monkey',\n    'mine',\n    'yell',\n    'boil',\n    'egg',\n    'shrill',\n    'gate',\n    'deserve',\n    'lettuce',\n    'play',\n    'pick',\n    'shaggy',\n    'bee',\n    'cross',\n    'carry',\n    'form',\n    'malicious',\n    'side',\n    'dusty',\n    'trick',\n    'responsible',\n    'visit',\n    'maniacal',\n    'vast',\n    'mitten',\n    'visitor',\n    'feeling',\n    'gorgeous',\n    'sneaky',\n    'zipper',\n    'muddle',\n    'thumb',\n    'insidious',\n    'fresh',\n    'passenger',\n    'flat',\n    'giant',\n    'penitent',\n    'snail',\n    'free',\n    'dear',\n    'group',\n    'smiling',\n    'reflect',\n    'shut',\n    'overjoyed',\n    'key',\n    'clammy',\n    'stone',\n    'judge',\n    'repulsive',\n    'plantation',\n    'dreary',\n    'town',\n    'sincere',\n    'expansion',\n    'paddle',\n    'push',\n    'tray',\n    'lewd',\n    'mice',\n    'board',\n    'thank',\n    'nut',\n    'unpack',\n    'wash',\n    'sister',\n    'brainy',\n    'purple',\n    'preach',\n    'merciful',\n    'sidewalk',\n    'pathetic',\n    'start',\n    'limit',\n    'naive',\n    'fantastic',\n    'rebel',\n    'invent',\n    'macho',\n    'cellar',\n    'sable',\n    'list',\n    'rob',\n    'spiky',\n    'savory',\n    'cart',\n    'nasty',\n    'evanescent',\n    'shame',\n    'hurried',\n    'calculator',\n    'comb',\n    'selfish',\n    'internal',\n    'axiomatic',\n    'seat',\n    'return',\n    'different',\n    'stream',\n    'frogs',\n    'oval',\n    'same',\n    'oafish',\n    'tug',\n    'thoughtless',\n    'heady',\n    'limping',\n    'badge',\n    'learned',\n    'efficacious',\n    'haunt',\n    'annoying',\n    'battle',\n    'tooth',\n    'heavy',\n    'spectacular',\n    'ajar',\n    'silent',\n    'statuesque',\n    'earth',\n    'zinc',\n    'laborer',\n    'boast',\n    'faithful',\n    'annoy',\n    'honey',\n    'women',\n    'bells',\n    'spare',\n    'remind',\n    'agreement',\n    'wry',\n    'slave',\n    'pumped',\n    'nebulous',\n    'royal',\n    'rot',\n    'reign',\n    'arrogant',\n    'spotted',\n    'wire',\n    'judicious',\n    'graceful',\n    'defeated',\n    'black',\n    'piquant',\n    'extend',\n    'early',\n    'belligerent',\n    'dust',\n    'cooing',\n    'subdued',\n    'lip',\n    'messy',\n    'snake',\n    'save',\n    'sheet',\n    'bow',\n    'hulking',\n    'accept',\n    'inquisitive',\n    'mammoth',\n    'elderly',\n    'land',\n    'kiss',\n    'freezing',\n    'aunt',\n    'quack',\n    'wave',\n    'dogs',\n    'knotty',\n    'arrest',\n    'bell',\n    'one',\n    'print',\n    'underwear',\n    'painful',\n    'wicked',\n    'birthday',\n    'cream',\n    'proud',\n    'sour',\n    'greedy',\n    'surprise',\n    'pray',\n    'fetch',\n    'furniture',\n    'songs',\n    'kitty',\n    'metal',\n    'painstaking',\n    'hat',\n    'adamant',\n    'rifle',\n    'charming',\n    'scale',\n    'heartbreaking',\n    'friend',\n    'blade',\n    'plane',\n    'cloth',\n    'holistic',\n    'yellow',\n    'sassy',\n    'terrible',\n    'bad',\n    'toes',\n    'parched',\n    'secretary',\n    'rescue',\n    'shiny',\n    'need',\n    'sticky',\n    'explode',\n    'squeeze',\n    'dime',\n    'ancient',\n    'idiotic',\n    'box',\n    'pot',\n    'field',\n    'handy',\n    'cent',\n    'drop',\n    'rings',\n    'taste',\n    'bead',\n    'ear',\n    'camera',\n    'month',\n    'move',\n    'awful',\n    'identify',\n    'yielding',\n    'omniscient',\n    'governor',\n    'handsome',\n    'vegetable',\n    'team',\n    'odd',\n    'sand',\n    'show',\n    'sweet',\n    'numberless',\n    'infamous',\n    'frightened',\n    'watery',\n    'wool',\n    'cobweb',\n    'coal',\n    'observe',\n    'connection',\n    'song',\n    'faulty',\n    'deafening',\n    'jog',\n    'match',\n    'complain',\n    'cut',\n    'servant',\n    'skirt',\n    'sticks',\n    'weigh',\n    'acid',\n    'excellent',\n    'damp',\n    'glib',\n    'devilish',\n    'attractive',\n    'trashy',\n    'nippy',\n    'tight',\n    'squirrel',\n    'power',\n    'bite',\n    'hang',\n    'cynical',\n    'rhyme',\n    'humdrum',\n    'sick',\n    'men',\n    'late',\n    'tempt',\n    'duck',\n    'eatable',\n    'dam',\n    'sharp',\n    'wistful',\n    'third',\n    'nimble',\n    'agonizing',\n    'living',\n    'closed',\n    'low',\n    'hissing',\n    'uppity',\n    'check',\n    'puffy',\n    'adjoining',\n    'ambiguous',\n    'sleepy',\n    'tour',\n    'rigid',\n    'erratic',\n    'abhorrent',\n    'colossal',\n    'vengeful',\n    'sky',\n    'grotesque',\n    'exultant',\n    'adaptable',\n    'turn',\n    'versed',\n    'donkey',\n    'ask',\n    'crazy',\n    'useful',\n    'pass',\n    'medical',\n    'prickly',\n    'guarded',\n    'explain',\n    'cooperative',\n    'drag',\n    'squalid',\n    'sock',\n    'ruthless',\n    'lumber',\n    'wrestle',\n    'worm',\n    'worry',\n    'capable',\n    'lamp',\n    'powder',\n    'squeal',\n    'control',\n    'class',\n    'depressed',\n    'point',\n    'death',\n    'gentle',\n    'beginner',\n    'reply',\n    'pour',\n    'likeable',\n    'actually',\n    'preserve',\n    'adhesive',\n    'clear',\n    'cool',\n    'squealing',\n    'veil',\n    'unsuitable',\n    'imperfect',\n    'count',\n    'curvy',\n    'brass',\n    'even',\n    'shoe',\n    'alcoholic',\n    'beautiful',\n    'youthful',\n    'treatment',\n    'bridge',\n    'animal',\n    'son',\n    'decision',\n    'humor',\n    'moon',\n    'delightful',\n    'design',\n    'improve',\n    'luxuriant',\n    'stay',\n    'tongue',\n    'stingy',\n    'collar',\n    'highfalutin',\n    'disgusting',\n    'white',\n    'mere',\n    'foregoing',\n    'hammer',\n    'vulgar',\n    'gifted',\n    'interest',\n    'tree',\n    'industry',\n    'exchange',\n    'icicle',\n    'snatch',\n    'better',\n    'cloistered',\n    'defiant',\n    'skate',\n    'park',\n    'encouraging',\n    'road',\n    'abrasive',\n    'possible',\n    'art',\n    'label',\n    'whimsical',\n    'abnormal',\n    'rule',\n    'bang',\n    'clap',\n    'welcome',\n    'charge',\n    'glass',\n    'slimy',\n    'eggnog',\n    'determined',\n    'neat',\n    'close',\n    'toys',\n    'scared',\n    'approval',\n    'trip',\n    'crooked',\n    'scrape',\n    'dramatic',\n    'books',\n    'canvas',\n    'pipe',\n    'window',\n    'breezy',\n    'hard',\n    'two',\n    'rice',\n    'miss',\n    'interrupt',\n    'plausible',\n    'mom',\n    'mountain',\n    'morning',\n    'watch',\n    'hair',\n    'strengthen',\n    'whisper',\n    'reading',\n    'trite',\n    'burst',\n    'manage',\n    'touch',\n    'ceaseless',\n    'weather',\n    'thing',\n    'swift',\n    'detailed',\n    'afraid',\n    'suspect',\n    'silver',\n    'enjoy',\n    'pancake',\n    'flippant',\n    'income',\n    'madly',\n    'tense',\n    'vague',\n    'quicksand',\n    'agree',\n    'haircut',\n    'aberrant',\n    'abject',\n    'horses',\n    'standing',\n    'peel',\n    'tiger',\n    'average',\n    'cultured',\n    'lake',\n    'shave',\n    'mellow',\n    'past',\n    'giants',\n    'rose',\n    'enthusiastic',\n    'exist',\n    'tow',\n    'cats',\n    'fool',\n    'tricky',\n    'slippery',\n    'travel',\n    'tire',\n    'bitter',\n    'knot',\n    'obtain',\n    'quiver',\n    'dirty',\n    'kittens',\n    'repeat',\n    'descriptive',\n    'stem',\n    'nest',\n    'trousers',\n    'mate',\n    'smoke',\n    'request',\n    'automatic',\n    'huge',\n    'street',\n    'bump',\n    'church',\n    'repair',\n    'strange',\n    'soggy',\n    'argue',\n    'elfin',\n    'spurious',\n    'occur',\n    'back',\n    'motion',\n    'chicken',\n    'arch',\n    'tickle',\n    'shy',\n    'nervous',\n    'wrap',\n    'glove',\n    'carve',\n    'punishment',\n    'zoo',\n    'dynamic',\n    'door',\n    'ablaze',\n    'weak',\n    'eager',\n    'fancy',\n    'imminent',\n    'current',\n    'onerous',\n    'joyous',\n    'beneficial',\n    'voyage',\n    'smart',\n    'quarter',\n    'dance',\n    'buzz',\n    'oil',\n    'letter',\n    'dull',\n    'kaput',\n    'oven',\n    'grumpy',\n    'can',\n    'mix',\n    'brush',\n    'wealth',\n    'record',\n    'clip',\n    'earn',\n    'book',\n    'planes',\n    'bikes',\n    'spark',\n    'lucky',\n    'frighten',\n    'languid',\n    'wilderness',\n    'drawer',\n    'happen',\n    'geese',\n    'five',\n    'fortunate',\n    'entertain',\n    'tall',\n    'slope',\n    'invincible',\n    'spell',\n    'phone',\n    'smooth',\n    'jobless',\n    'woozy',\n    'berserk',\n    'flock',\n    'sea',\n    'moor',\n    'alarm',\n    'stare',\n    'aloof',\n    'rural',\n    'finicky',\n    'sprout',\n    'distribution',\n    'embarrass',\n    'groan',\n    'melt',\n    'salty',\n    'bizarre',\n    'small',\n    'ticket',\n    'young',\n    'offbeat',\n    'material',\n    'recondite',\n    'woebegone',\n    'combative',\n    'disarm',\n    'trade',\n    'yam',\n    'wink',\n    'pack',\n    'pleasant',\n    'doll',\n    'disastrous',\n    'rabbits',\n    'shivering',\n    'loving',\n    'irate',\n    'industrious',\n    'plastic',\n    'cabbage',\n    'top',\n    'room',\n    'cough',\n    'bare',\n    'release',\n    'grab',\n    'stain',\n    'jail',\n    'basketball',\n    'magical',\n    'incandescent',\n    'rustic',\n    'vacuous',\n    'unfasten',\n    'chase',\n    'crack',\n    'toad',\n    'dream',\n    'glamorous',\n    'impossible',\n    'lace',\n    'present',\n    'detail',\n    'gruesome',\n    'ill',\n    'credit',\n    'tramp',\n    'stormy',\n    'chop',\n    'recess',\n    'dolls',\n    'somber',\n    'finger',\n    'afterthought',\n    'quizzical',\n    'confess',\n    'nappy',\n    'range',\n    'bake',\n    'glue',\n    'remember',\n    'flavor',\n    'defective',\n    'divergent',\n    'use',\n    'history',\n    'psychotic',\n    'precious',\n    'car',\n    'annoyed',\n    'fair',\n    'wholesale',\n    'sparkle',\n    'pan',\n    'abstracted',\n    'grateful',\n    'flight',\n    'notebook',\n    'cause',\n    'secret',\n    'attempt',\n    'obese',\n    'trot',\n    'card',\n    'drum',\n    'regret',\n    'organic',\n    'skip',\n    'helpful',\n    'time',\n    'toe',\n    'grandiose',\n    'ugly',\n    'ants',\n    'fuzzy',\n    'tasteful',\n    'money',\n    'blushing',\n    'reason',\n    'harmony',\n    'relieved',\n    'shaky',\n    'romantic',\n    'illegal',\n    'perpetual',\n    'ski',\n    'nail',\n    'halting',\n    'care',\n    'grouchy',\n    'religion',\n    'ladybug',\n    'desert',\n    'war',\n    'lie',\n    'wrist',\n    'circle',\n    'straight',\n    'pop',\n    'bed',\n    'scratch',\n    'nifty',\n    'popcorn',\n    'baseball',\n    'cheer',\n    'bath',\n    'representative',\n    'fertile',\n    'train',\n    'heavenly',\n    'cumbersome',\n    'disgusted',\n    'tasteless',\n    'attraction',\n    'whip',\n    'country',\n    'run',\n    'alleged',\n    'willing',\n    'pin',\n    'reflective',\n    'supply',\n    'reproduce',\n    'lazy',\n    'frantic',\n    'needless',\n    'best',\n    'addition',\n    'communicate',\n    'tangible',\n    'thin',\n    'honorable',\n    'argument',\n    'carpenter',\n    'office',\n    'nosy',\n    'silky',\n    'public',\n    'first',\n    'jumbled',\n    'soda',\n    'signal',\n    'cure',\n    'bike',\n    'tawdry',\n    'pastoral',\n    'hover',\n    'decide',\n    'crate',\n    'dangerous',\n    'handle',\n    'general',\n    'cave',\n    'disturbed',\n    'shelter',\n    'flashy',\n    'wrong',\n    'meal',\n    'nonchalant',\n    'functional',\n    'sin',\n    'question',\n    'authority',\n    'ordinary',\n    'last',\n    'military',\n    'simple',\n    'pat',\n    'found',\n    'include',\n    'toothsome',\n    'previous',\n    'calendar',\n    'smelly',\n    'advise',\n    'wheel',\n    'reject',\n    'memorise',\n    'vacation',\n    'angry',\n    'cattle',\n    'brake',\n    'cows',\n    'fence',\n    'whole',\n    'festive',\n    'protest',\n    'meek',\n    'fragile',\n    'enchanted',\n    'unit',\n  ],\n}\n\nexport default words\n","import React from 'react'\nimport words from '../AllWords'\n\nconst ADD_HIGHLIGHT = true\n\nclass nodeTrie {\n  isEnd: boolean\n  children: { [key: string]: nodeTrie }\n  parent: nodeTrie\n  key: string\n  childrenJSX: JSX.Element[]\n  currentJSX: JSX.Element\n\n  constructor(key: string) {\n    this.isEnd = false\n    this.children = {}\n    this.parent = null\n    this.key = key\n    this.childrenJSX = []\n    this.currentJSX = (\n      <li key={this.key}>\n        <div className=\"normal\">{key ? key : 'Root'}</div>\n        {this.childrenJSX.length ? <ul>{this.childrenJSX}</ul> : null}\n      </li>\n    )\n  }\n\n  updateJSX(isAddHighlight = false) {\n    this.childrenJSX = []\n    const keys = Object.keys(this.children)\n    for (let i = 0; i < keys.length; i++) {\n      this.childrenJSX.push(this.children[keys[i]].currentJSX)\n    }\n\n    this.currentJSX = (\n      <li key={this.key}>\n        <div\n          className={`normal ${this.isEnd ? 'end' : ''} ${\n            isAddHighlight ? 'highlight' : ''\n          }`}\n        >\n          {this.key ? this.key : 'Root'}\n        </div>\n        {this.childrenJSX.length ? <ul>{this.childrenJSX}</ul> : null}\n      </li>\n    )\n\n    if (this.parent) this.parent.updateJSX(isAddHighlight)\n  }\n}\n\nclass Trie {\n  root: nodeTrie\n  highlightedTill: nodeTrie\n\n  constructor(num = null) {\n    this.root = new nodeTrie(null)\n    this.highlightedTill = null\n    if (num) this.randomTrie(num)\n  }\n\n  insert(word: string): void {\n    if (word === '') return\n    word = word.trim()\n    word = word.toUpperCase()\n    let node = this.root\n    for (let i = 0; i < word.length; i++) {\n      if (!node.children[word[i]]) {\n        node.children[word[i]] = new nodeTrie(word[i])\n        node.children[word[i]].parent = node\n      }\n      node = node.children[word[i]]\n      if (i === word.length - 1) node.isEnd = true\n    }\n    node.updateJSX()\n  }\n\n  searchWord(word: string): boolean {\n    if (word === '') return false\n    word = word.trim()\n    word = word.toUpperCase()\n    let node = this.root\n    for (let i = 0; i < word.length; i++) {\n      if (!node.children[word[i]]) return false\n      node = node.children[word[i]]\n      if (i === word.length - 1) return node.isEnd\n    }\n    return false\n  }\n\n  deleteWord(word: string): boolean {\n    if (!this.searchWord(word)) return false\n    word = word.trim()\n    word = word.toUpperCase()\n    let node = this.root\n    for (let i = 0; i < word.length; i++) {\n      node = node.children[word[i]]\n    }\n    node.isEnd = false\n\n    if (Object.keys(node.children).length === 0) {\n      node = node.parent\n      for (let i = word.length - 1; i >= 0; i--) {\n        if (node === this.root) {\n          delete node.children[word[i]]\n          break\n        }\n        if (node.isEnd) {\n          delete node.children[word[i]]\n          break\n        }\n\n        if (Object.keys(node.children).length > 1) {\n          delete node.children[word[i]]\n          break\n        }\n        node = node.parent\n      }\n    }\n\n    node.updateJSX()\n    return true\n  }\n\n  findPrefix(word: string): boolean {\n    this.removeHighligt()\n    if (word === '') return false\n    word = word.trim()\n    word = word.toUpperCase()\n    let node = this.root\n    for (let i = 0; i < word.length; i++) {\n      if (!node.children[word[i]]) return false\n      node = node.children[word[i]]\n    }\n    node.updateJSX(ADD_HIGHLIGHT)\n    this.highlightedTill = node\n    return true\n  }\n\n  findAllWords(): string[] {\n    const node = this.root\n    const allWords = []\n    for (let i = 0; i < Object.keys(node.children).length; i++) {\n      this.findAllWordsHelper(\n        node.children[Object.keys(node.children)[i]],\n        allWords,\n      )\n    }\n    return allWords\n  }\n\n  findAllWordsHelper(node: nodeTrie, allWords: string[], word = ''): void {\n    word += node.key\n    if (node.isEnd) allWords.push(word)\n    for (let i = 0; i < Object.keys(node.children).length; i++) {\n      this.findAllWordsHelper(\n        node.children[Object.keys(node.children)[i]],\n        allWords,\n        word,\n      )\n    }\n  }\n\n  //Inserts num random words to the trie\n  randomTrie(num: number): void {\n    if (num > 993) num = 993\n    const allWords = words['words']\n    const upper = 0\n    const lower = num * 2 + 10\n    const indexOfWordsAdded = new Set()\n    for (let i = 0; i < num; i++) {\n      let value = Math.floor(Math.random() * (upper - lower + 1)) + lower\n      while (indexOfWordsAdded.has(value) || value > 993) {\n        value = Math.floor(Math.random() * (upper - lower + 1)) + lower\n      }\n      indexOfWordsAdded.add(value)\n      this.insert(allWords[value])\n    }\n  }\n\n  removeHighligt(): void {\n    if (this.highlightedTill) {\n      this.highlightedTill.updateJSX()\n      this.highlightedTill = null\n    }\n  }\n}\n\nexport default Trie\n","import React, { forwardRef, useEffect, useImperativeHandle } from 'react'\nimport { TREE_ID } from '../constants'\nimport TrieDataStructure from '../data-structures/Trie'\nimport useTreeState from '../hooks/useTreeState'\nimport useTreeStyle from '../hooks/useTreeStyle'\nimport '../styles/BinarySearchTree.css'\nimport { TreeStylesType, TrieRefType } from '../types'\nimport { compareArray } from '../util'\n\ntype TrieProps = {\n  data?: string[]\n  treeStyles?: TreeStylesType\n}\n\nconst Trie: React.ForwardRefRenderFunction<TrieRefType, TrieProps> = (\n  { data, treeStyles }: TrieProps,\n  ref: React.MutableRefObject<TrieRefType>,\n) => {\n  const { tree, treeJSX, setTree } = useTreeState<TrieDataStructure>(null)\n  useTreeStyle(treeStyles)\n\n  const trieFunctions: TrieRefType = {\n    insert: (word: string) => {\n      // if tree is empty\n      if (!tree?.root) {\n        const newTree = new TrieDataStructure()\n        newTree.insert(word)\n        setTree(newTree)\n        return\n      }\n\n      tree.insert(word)\n      setTree(tree)\n    },\n    remove: (word: string) => {\n      if (!tree?.root || !word) return false\n      if (tree.deleteWord(word)) {\n        setTree(tree.root ? tree : null)\n        return true\n      }\n      return false\n    },\n    search: (word: string) => {\n      if (!tree?.root || !word) return false\n      if (tree.searchWord(word)) {\n        // Highlights the word in the trie\n        tree.findPrefix(word)\n        setTree(tree)\n        return true\n      }\n      return false\n    },\n    searchPrefix: (word: string) => {\n      if (!tree?.root) return false\n      const isPrefixFound = tree.findPrefix(word)\n      setTree(tree)\n      return isPrefixFound\n    },\n    getAllWords: () => {\n      if (!tree?.root) return []\n      return tree.findAllWords()\n    },\n    generateRandomTrie: (wordCount: number) => {\n      const newTrie = new TrieDataStructure(wordCount)\n      setTree(newTrie)\n    },\n    removeHighlight: () => {\n      tree.removeHighligt()\n      setTree(tree)\n    },\n  }\n\n  useImperativeHandle(ref, () => trieFunctions)\n\n  const handleData = () => {\n    const newTree = new TrieDataStructure()\n    data.forEach((elem) => newTree.insert(elem))\n    setTree(newTree)\n  }\n\n  useEffect(() => {\n    if (data) handleData()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data])\n\n  return (\n    <div id={TREE_ID}>\n      <ul>{treeJSX}</ul>\n    </div>\n  )\n}\n\n// returns true if data has changed\nconst compareTrie = (previousPros: TrieProps, newProps: TrieProps) =>\n  previousPros.data &&\n  newProps.data &&\n  compareArray(previousPros.data, newProps.data)\n\nexport default React.memo(forwardRef(Trie), compareTrie)\n","import React from 'react'\nimport { BINARY_TREE_TYPE } from '../constants'\n\nconst LEFT = 'left'\nconst RIGHT = 'right'\n\nconst { BALANCED, COMPLETE, FULL, PERFECT } = BINARY_TREE_TYPE\n\nconst NULL_NODE_JSX = (\n  <li className=\"null\">\n    <div>null</div>\n  </li>\n)\n\nconst getNormalNodeJSX = (\n  value: number,\n  height: number,\n  leftJSX: JSX.Element,\n  rightJSX: JSX.Element,\n  isHighlighted = false,\n) => (\n  <li key={value}>\n    <div className={`normal ${isHighlighted ? 'highlight' : ''}`}>\n      {value} <p className=\"height\">{height}</p>\n    </div>\n    <ul>\n      {leftJSX} {rightJSX}\n    </ul>\n  </li>\n)\n\nclass Node {\n  value: number\n  height: number\n  left: Node\n  right: Node\n  parent: Node\n  leftJSX: JSX.Element\n  rightJSX: JSX.Element\n  currentJSX: JSX.Element\n\n  constructor(value: number) {\n    this.value = value\n    this.height = 0\n    this.left = null\n    this.right = null\n    this.parent = null\n    this.leftJSX = NULL_NODE_JSX\n    this.rightJSX = NULL_NODE_JSX\n    this.currentJSX = getNormalNodeJSX(\n      this.value,\n      this.height,\n      this.leftJSX,\n      this.rightJSX,\n    )\n  }\n\n  //Inserting JSX of a new node\n  insert(node: Node, isLeft: boolean) {\n    const newJSX = node.currentJSX\n\n    if (isLeft) {\n      this.leftJSX = newJSX\n    } else {\n      this.rightJSX = newJSX\n    }\n    this.setJSX()\n    this.updateRootJSX()\n  }\n\n  //Updating JSX of a node\n  setJSX() {\n    this.currentJSX = getNormalNodeJSX(\n      this.value,\n      this.height,\n      this.leftJSX,\n      this.rightJSX,\n    )\n  }\n\n  //Updating JSX of the whole tree\n  updateRootJSX() {\n    if (this.parent !== null) {\n      if (this.parent.left === this) this.parent.insert(this, true)\n      else this.parent.insert(this, false)\n    }\n  }\n\n  //Changing a child to null\n  setChildToNull(isLeft: boolean) {\n    if (isLeft) {\n      this.leftJSX = NULL_NODE_JSX\n    } else {\n      this.rightJSX = NULL_NODE_JSX\n    }\n    this.setJSX()\n    this.updateRootJSX()\n  }\n\n  //interchanging a child with a grandchild\n  setChildToChildsChild(isLeftChild: boolean, isLeft: boolean) {\n    if (isLeftChild) {\n      if (isLeft) {\n        this.leftJSX = this.left.left.currentJSX\n        this.setJSX()\n      } else {\n        this.leftJSX = this.left.right.currentJSX\n        this.setJSX()\n      }\n    } else {\n      if (isLeft) {\n        this.rightJSX = this.right.left.currentJSX\n        this.setJSX()\n      } else {\n        this.rightJSX = this.right.right.currentJSX\n\n        this.setJSX()\n      }\n    }\n    this.updateRootJSX()\n  }\n\n  //Removing JSX of a deleted node\n  remove(childrenCondtion?: string) {\n    if (!this.parent) return\n    if (!childrenCondtion) {\n      if (this.parent.left === this) {\n        this.parent.setChildToNull(true)\n      } else {\n        this.parent.setChildToNull(false)\n      }\n    } else if (childrenCondtion === LEFT) {\n      if (this.parent.left === this) {\n        this.parent.setChildToChildsChild(true, true)\n      } else {\n        this.parent.setChildToChildsChild(false, true)\n      }\n    } else {\n      if (this.parent.left === this) {\n        this.parent.setChildToChildsChild(true, false)\n      } else {\n        this.parent.setChildToChildsChild(false, false)\n      }\n    }\n  }\n\n  //Updates value of a node JSX\n  updateValue(value: number) {\n    this.value = value\n    this.setJSX()\n    this.updateRootJSX()\n  }\n\n  //Adds Highlight to node JSX\n  addHighlight() {\n    // TODO: Test\n    this.currentJSX = getNormalNodeJSX(\n      this.value,\n      this.height,\n      this.leftJSX,\n      this.rightJSX,\n      true,\n    )\n\n    this.updateRootJSX()\n  }\n\n  //Clears Highlight of the node JSX\n  clearHighlight() {\n    this.setJSX()\n\n    this.updateRootJSX()\n  }\n\n  //Updating JSX after balancing\n  balanceJSX() {\n    if (!this.left && this.right) {\n      this.right.balanceJSX()\n\n      this.rightJSX = this.right.currentJSX\n      this.setChildToNull(true)\n    } else if (!this.right && this.left) {\n      this.left.balanceJSX()\n\n      this.leftJSX = this.left.currentJSX\n      this.setChildToNull(false)\n    } else if (this.right && this.left) {\n      this.left.balanceJSX()\n      this.right.balanceJSX()\n\n      this.leftJSX = this.left.currentJSX\n      this.rightJSX = this.right.currentJSX\n      this.setJSX()\n      this.updateRootJSX()\n    } else {\n      this.leftJSX = NULL_NODE_JSX\n\n      this.rightJSX = NULL_NODE_JSX\n      this.setJSX()\n      this.updateRootJSX()\n    }\n  }\n}\n\nclass AVL {\n  root: Node\n  highlightedNode: Node\n  leafDepth: number\n  constructor(num = 0) {\n    this.root = null\n    if (num) {\n      this.generateRandomBST(num)\n    }\n    this.highlightedNode = null\n    this.leafDepth = -1\n  }\n\n  //Helper functions\n  rotateRight(node: Node) {\n    const tempNode = node.left\n    if (node.left.right) node.left.right.parent = node\n    node.left = node.left.right\n\n    //For Handling JSX\n    tempNode.parent = node.parent\n    node.parent = tempNode\n    //For Handling JSX END\n\n    tempNode.right = node\n    tempNode.height = this.setHeight(tempNode)\n    node.height = this.setHeight(node)\n    return tempNode\n  }\n\n  rotateLeft(node: Node) {\n    const tempNode = node.right\n    if (node.right.left) node.right.left.parent = node\n    node.right = node.right.left\n\n    //For Handling JSX\n    tempNode.parent = node.parent\n    node.parent = tempNode\n    //For Handling JSX END\n\n    tempNode.left = node\n    // tempNode.left\n    tempNode.height = this.setHeight(tempNode)\n    node.height = this.setHeight(node)\n    return tempNode\n  }\n\n  //Sets hight of a node\n  setHeight(node: Node) {\n    if (node === null) return -1\n    const leftHeight = node.left !== null ? node.left.height : -1\n    const rightHeight = node.right !== null ? node.right.height : -1\n    return Math.max(leftHeight, rightHeight) + 1\n  }\n\n  //Checks if a sub tree is balanced\n  balanceCheck(node: Node) {\n    if (node === null) return 0\n    const leftHeight = node.left !== null ? node.left.height : -1\n    const rightHeight = node.right !== null ? node.right.height : -1\n    return leftHeight - rightHeight\n  }\n\n  //Balances the Tree\n  balance(node: Node) {\n    const balance = this.balanceCheck(node)\n    if (balance > 1) {\n      if (this.setHeight(node.left.left) > this.setHeight(node.left.right)) {\n        node = this.rotateRight(node)\n      } else {\n        node.left = this.rotateLeft(node.left)\n\n        node = this.rotateRight(node)\n      }\n    } else if (balance < -1) {\n      if (this.setHeight(node.right.right) > this.setHeight(node.right.left)) {\n        node = this.rotateLeft(node)\n      } else {\n        node.right = this.rotateRight(node.right)\n\n        node = this.rotateLeft(node)\n      }\n    }\n    if (node !== null) node.height = this.setHeight(node)\n    if (node && node.right) node.right.balanceJSX()\n    if (node && node.left) node.left.balanceJSX()\n    return node\n  }\n\n  findMax(node = this.root) {\n    if (node == null) {\n      return node\n    } else if (node.right == null) {\n      return node\n    } else {\n      return this.findMax(node.right)\n    }\n  }\n\n  findMin(node = this.root) {\n    if (node == null) {\n      return node\n    } else if (node.left == null) {\n      return node\n    } else {\n      return this.findMin(node.left)\n    }\n  }\n\n  //inserting a new node\n  insert(value: number) {\n    this.clearHighlight()\n    const newNode = new Node(value)\n    if (this.root === null) this.root = newNode\n    else this.root = this.insertNode(this.root, newNode)\n  }\n\n  insertNode(node: Node, newNode: Node) {\n    if (newNode.value < node.value) {\n      if (node.left === null) {\n        node.left = newNode\n        newNode.parent = node\n        node.insert(newNode, true)\n      } else node.left = this.insertNode(node.left, newNode)\n    } else {\n      if (node.right === null) {\n        node.right = newNode\n        newNode.parent = node\n        node.insert(newNode, false)\n      } else node.right = this.insertNode(node.right, newNode)\n    }\n\n    node = this.balance(node)\n    return node\n  }\n\n  //Deleting node\n  remove(value: number) {\n    this.clearHighlight()\n    this.root = this.removeNode(this.root, value)\n  }\n\n  removeNode(node: Node, value: number) {\n    if (node === null || typeof node === 'undefined') return null\n    else if (value < node.value) {\n      node.left = this.removeNode(node.left, value)\n      // return node\n    } else if (value > node.value) {\n      node.right = this.removeNode(node.right, value)\n      // return node\n    } else {\n      if (node.left === null && node.right === null) {\n        node.remove(null)\n        node = null\n        // return node\n      } else if (node.left === null) {\n        node.remove(RIGHT)\n        node.right.parent = node.parent\n        node = node.right\n        // return node\n      } else if (node.right === null) {\n        node.remove(LEFT)\n        node.left.parent = node.parent\n        node = node.left\n        // return node\n      } else {\n        const minNodeOfRight = this.findMin(node.right)\n        node.updateValue(minNodeOfRight.value)\n\n        node.right = this.removeNode(node.right, minNodeOfRight.value)\n      }\n    }\n    node = this.balance(node)\n    return node\n  }\n\n  //Tree Traversal\n  preorder(list: number[], node = this.root) {\n    if (node !== null) {\n      list.push(node.value)\n      this.preorder(list, node.left)\n      this.preorder(list, node.right)\n    }\n  }\n\n  inorder(list: number[], node = this.root) {\n    if (node !== null) {\n      this.inorder(list, node.left)\n      list.push(node.value)\n      this.inorder(list, node.right)\n    }\n  }\n\n  postorder(list: number[], node = this.root) {\n    if (node !== null) {\n      this.postorder(list, node.left)\n      this.postorder(list, node.right)\n      list.push(node.value)\n    }\n  }\n\n  //Search\n  search(value: number, node = this.root) {\n    this.clearHighlight()\n\n    if (node === null) return false\n    else if (node.value === value) {\n      node.addHighlight()\n      this.highlightedNode = node\n      return true\n    } else if (node.value > value) return this.search(value, node.left)\n    else return this.search(value, node.right)\n  }\n\n  //Random Tree generator\n  generateRandomBST(num: number) {\n    const upper = 0\n    const lower = num * 2 + 10\n    const elements = new Set()\n\n    for (let i = 0; i < num; i++) {\n      let value = Math.floor(Math.random() * (upper - lower + 1)) + lower\n      while (elements.has(value)) {\n        value = Math.floor(Math.random() * (upper - lower + 1)) + lower\n      }\n      elements.add(value)\n\n      this.insert(value)\n    }\n  }\n\n  //BST Checker\n  //Main Checker function\n  checkAVL() {\n    const BSTTypeList = []\n    if (this.isBalanced()) {\n      BSTTypeList.push(BALANCED)\n    }\n    if (this.isComplete()) {\n      BSTTypeList.push(COMPLETE)\n    }\n    if (this.isPerfect()) {\n      BSTTypeList.push(PERFECT)\n    }\n    if (this.isFull()) {\n      BSTTypeList.push(FULL)\n    }\n    return BSTTypeList\n  }\n\n  //Subfunctions\n  //balance\n  isBalanced(node = this.root) {\n    if (node === null) return true\n    const leftH = node.left ? node.left.height : -1\n    const rightH = node.right ? node.right.height : -1\n    if (Math.abs(leftH - rightH) <= 1) {\n      return this.isBalanced(node.left) && this.isBalanced(node.right)\n    } else {\n      return false\n    }\n  }\n\n  //complete\n  isComplete() {\n    const totalNodes = this.countNodes()\n    return this.isComplete2(0, totalNodes)\n  }\n  isComplete2(index: number, totalNodes: number, node = this.root) {\n    if (node === null) return true\n    else if (index >= totalNodes) return false\n    else {\n      let ans = this.isComplete2(index * 2 + 1, totalNodes, node.left)\n      ans &= this.isComplete2(index * 2 + 2, totalNodes, node.right)\n      return ans\n    }\n  }\n\n  //perfect\n  isPerfect() {\n    if (!this.isFull() || !this.isComplete()) return false\n    return this.isPerfect2()\n  }\n\n  isPerfect2(node = this.root, depth = 0) {\n    if (!node) return true\n    depth++\n    if (!node.right && !node.left) {\n      if (this.leafDepth !== -1 && this.leafDepth !== depth) return false\n      this.leafDepth = depth\n    }\n    return (\n      this.isPerfect2(node.left, depth) && this.isPerfect2(node.right, depth)\n    )\n  }\n\n  //full\n  isFull(node = this.root) {\n    if (node === null) return true\n    else if (node.left === null && node.right === null) return true\n    else if (node.left !== null && node.right !== null) {\n      let ans: boolean\n      ans = this.isFull(node.left)\n      ans &&= this.isFull(node.right)\n      return ans\n    } else return false\n  }\n\n  countNodes(node = this.root) {\n    if (node === null) return 0\n    return this.countNodes(node.left) + 1 + this.countNodes(node.right)\n  }\n\n  //Clears highlight of previously searched nodes\n  clearHighlight() {\n    if (this.highlightedNode) {\n      this.highlightedNode.clearHighlight()\n      this.highlightedNode = null\n    }\n  }\n}\n\nexport default AVL\n","import React, { forwardRef, useEffect, useImperativeHandle } from 'react'\nimport { TREE_ID } from '../constants'\nimport AVL from '../data-structures/AVLTree'\nimport useTreeState from '../hooks/useTreeState'\nimport useTreeStyle from '../hooks/useTreeStyle'\nimport {\n  SelfBalancingTreeRefType,\n  BinaryTreeCheckType,\n  TraversalOrderType,\n  TreeStylesType,\n} from '../types'\nimport { compareArray } from '../util'\n\ntype AVLTreeProps = {\n  data?: number[]\n  treeStyles?: TreeStylesType\n}\n\nconst AVLTree: React.ForwardRefRenderFunction<\n  SelfBalancingTreeRefType,\n  AVLTreeProps\n> = (\n  { data, treeStyles }: AVLTreeProps,\n  ref: React.MutableRefObject<SelfBalancingTreeRefType>,\n) => {\n  const { tree, treeJSX, setTree } = useTreeState<AVL>(null)\n  useTreeStyle(treeStyles)\n\n  useImperativeHandle(ref, () => ({\n    insert: (value: number) => {\n      // if tree is empty\n      if (!tree?.root) {\n        const newTree = new AVL()\n        newTree.insert(value)\n        setTree(newTree)\n        return\n      }\n\n      tree.insert(value)\n      setTree(tree)\n    },\n    remove: (value: number): boolean => {\n      if (!tree?.root) return false\n\n      if (!tree.search(value)) return false\n      tree.remove(value)\n      setTree(tree.root ? tree : null)\n      return true\n    },\n    search: (value: number): boolean => {\n      if (!tree?.root) return false\n      const foundNode = tree.search(value)\n      if (foundNode) setTree(tree)\n      return foundNode\n    },\n    getData: (traversalOrder: TraversalOrderType): number[] => {\n      const traversalData = []\n      tree[traversalOrder](traversalData)\n      return traversalData\n    },\n    clear: () => {\n      setTree(new AVL())\n    },\n    generateRandomTree: (countOfNodes: number) => {\n      const newTree = new AVL(countOfNodes)\n      setTree(newTree)\n    },\n    checkTreeType: (): BinaryTreeCheckType[] => {\n      return tree.checkAVL()\n    },\n  }))\n\n  const handleData = () => {\n    const newTree = new AVL()\n    data.forEach((elem) => newTree.insert(elem))\n    setTree(newTree)\n  }\n\n  useEffect(() => {\n    if (data) handleData()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data])\n\n  return (\n    <div id={TREE_ID}>\n      <ul>{treeJSX}</ul>\n    </div>\n  )\n}\n\n// returns true if data has changed\nconst compareAVLTree = (previousPros: AVLTreeProps, newProps: AVLTreeProps) =>\n  previousPros.data &&\n  newProps.data &&\n  compareArray(previousPros.data, newProps.data)\n\nexport default React.memo(forwardRef(AVLTree), compareAVLTree)\n","import React from 'react'\nimport { BINARY_TREE_TYPE } from '../constants'\n\ntype Color = typeof RED | typeof BLACK\n\nconst BLACK = 0\nconst RED = 1\nconst { BALANCED, COMPLETE, FULL, PERFECT } = BINARY_TREE_TYPE\n\nconst getNormalNodeJSX = (\n  value: number,\n  leftJSX: JSX.Element,\n  rightJSX: JSX.Element,\n  color: Color,\n  isHighlighted = false,\n) => (\n  <li key={value}>\n    <div\n      className={`normal ${color === RED ? 'red' : 'black'} ${\n        isHighlighted ? 'highlight' : ''\n      }`}\n    >\n      {value}\n    </div>\n    <ul>\n      {leftJSX} {rightJSX}\n    </ul>\n  </li>\n)\n\nclass NullNode {\n  color: number\n  isNull: boolean\n  parent: Node\n  currentJSX: JSX.Element\n  value: null\n  left: null\n  right: null\n  insert() {\n    return\n  }\n  addHighlight() {\n    return\n  }\n  constructor() {\n    this.color = BLACK\n    this.isNull = true\n    this.parent = null\n    this.currentJSX = (\n      <li className=\"null\">\n        <div className={`null black`}>null</div>\n      </li>\n    )\n  }\n}\n\nclass Node {\n  value: number\n  color: Color\n  right: Node | NullNode\n  left: Node | NullNode\n  parent: Node\n  isNull: boolean\n  currentJSX: JSX.Element\n\n  constructor(value: number) {\n    const newNullNode = new NullNode()\n    newNullNode.parent = this\n    this.value = value\n    this.color = RED\n    this.right = newNullNode\n    this.left = newNullNode\n    this.parent = null\n    this.isNull = false\n\n    this.currentJSX = (\n      <li key={this.value}>\n        <div className={`normal red`}>{this.value}</div>\n        <ul>\n          {this.left.currentJSX} {this.right.currentJSX}\n        </ul>\n      </li>\n    )\n  }\n\n  //Updating html of a node\n  setHtml() {\n    this.currentJSX = getNormalNodeJSX(\n      this.value,\n      this.left.currentJSX,\n      this.right.currentJSX,\n      this.color,\n    )\n  }\n\n  //Updating html of the whole tree\n  updateRootHtml() {\n    if (this.parent !== null) {\n      this.parent.insert()\n    }\n  }\n\n  //Inserting new node to tree\n  insert() {\n    this.setHtml()\n    this.updateRootHtml()\n  }\n\n  //Adds Highlight to node html\n  addHighlight() {\n    this.currentJSX = getNormalNodeJSX(\n      this.value,\n      this.left.currentJSX,\n      this.right.currentJSX,\n      this.color,\n      true,\n    )\n\n    this.updateRootHtml()\n  }\n\n  //Clears Highlight of the node html\n  clearHighlight() {\n    this.setHtml()\n    this.updateRootHtml()\n  }\n}\n\nclass RBT {\n  root: Node | NullNode\n  highlighted: Node\n  leafDepth: number\n\n  constructor(num = 0) {\n    const newNullNode = new NullNode()\n    this.root = newNullNode\n    if (num) {\n      this.generateRandomBST(num)\n    }\n    this.highlighted = null\n    this.leafDepth = -1\n  }\n\n  //Helper functions\n  //Rotate right\n  rotateRight(node: Node, toRecolor: boolean) {\n    const parent = node.parent\n    node.parent = parent.parent\n    if (parent.parent !== null) {\n      if (parent.parent.left === parent) {\n        parent.parent.left = node\n      } else {\n        parent.parent.right = node\n      }\n    }\n    const right = node.right\n    node.right = parent\n    parent.parent = node\n    parent.left = right\n    right.parent = parent\n    if (toRecolor) {\n      node.color = BLACK\n      parent.color = RED\n    }\n  }\n\n  //Rotate left\n  rotateLeft(node: Node, toRecolor: boolean) {\n    const parent = node.parent\n    node.parent = parent.parent\n    if (parent.parent !== null) {\n      if (parent.parent.right === parent) {\n        parent.parent.right = node\n      } else {\n        parent.parent.left = node\n      }\n    }\n    const left = node.left\n    node.left = parent\n    parent.parent = node\n    parent.right = left\n    left.parent = parent\n    if (toRecolor) {\n      node.color = BLACK\n      parent.color = RED\n    }\n  }\n\n  //Find sibling\n  siblingOf(node: Node) {\n    if (node.parent === null) return null\n    if (node.parent.left === node) {\n      return node.parent.right\n    } else {\n      return node.parent.left\n    }\n  }\n\n  //Finding min value\n  findMin(node = this.root) {\n    if (node.isNull) {\n      return node\n    } else if (node.left.isNull) {\n      return node\n    } else {\n      return this.findMin(node.left)\n    }\n  }\n\n  //Insert\n  insert(value: number) {\n    this.root = this.insertNode(null, this.root as Node, value)\n  }\n\n  //Insert helper function\n  insertNode(parent: Node, node: Node, value: number) {\n    if (node.isNull) {\n      const newNode = new Node(value)\n      if (parent === null) {\n        newNode.color = BLACK\n        newNode.insert()\n        return newNode\n      } else {\n        newNode.parent = parent\n        return newNode\n      }\n    }\n\n    if (node.value === value) {\n      return node\n    }\n\n    let isLeft: boolean\n    if (node.value > value) {\n      const left = this.insertNode(node, node.left as Node, value)\n      if (left === node.parent) {\n        node.insert()\n        return left\n      }\n      node.left = left\n      isLeft = true\n    } else {\n      const right = this.insertNode(node, node.right as Node, value)\n      if (right === node.parent) {\n        node.insert()\n        return right\n      }\n      node.right = right\n      isLeft = false\n    }\n\n    if (isLeft) {\n      if (node.left.color === RED && node.color === RED) {\n        const sibling = this.siblingOf(node)\n        if (sibling.color === BLACK || sibling.isNull) {\n          if (node.parent.left === node) {\n            this.rotateRight(node, true)\n          } else {\n            this.rotateRight(node.left as Node, false)\n            node = node.parent\n            this.rotateLeft(node, true)\n          }\n        } else {\n          node.color = BLACK\n          sibling.color = BLACK\n          if (node.parent.parent !== null) {\n            node.parent.color = RED\n          }\n        }\n      }\n    } else {\n      if (node.right.color === RED && node.color === RED) {\n        const sibling = this.siblingOf(node)\n        if (sibling.color === BLACK || sibling.isNull) {\n          if (node.parent.right === node) {\n            this.rotateLeft(node, true)\n          } else {\n            this.rotateLeft(node.right as Node, false)\n            node = node.parent\n            this.rotateRight(node, true)\n          }\n        } else {\n          node.color = BLACK\n          sibling.color = BLACK\n          if (node.parent.parent !== null) {\n            node.parent.color = RED\n          }\n        }\n      }\n    }\n\n    if (!node.left.isNull) node.left.insert()\n    if (!node.right.isNull) node.right.insert()\n\n    return node\n  }\n\n  //Delete Node\n  remove(value: number, node = this.root) {\n    this.clearHighlight()\n    if (node.isNull) {\n      return\n    }\n    if (node.value === value) {\n      if (node.left.isNull || node.right.isNull) {\n        const tempParent = node.parent\n        this.deleteOneChild(node as Node)\n        if (tempParent) {\n          if (!tempParent.left.isNull) tempParent.left.insert()\n          if (!tempParent.right.isNull) tempParent.right.insert()\n          tempParent.insert()\n          if (tempParent.parent) tempParent.parent.insert()\n        } else if (!this.root.isNull) this.root.insert()\n      } else {\n        const smallestRight = this.findMin(node.right)\n        node.value = smallestRight.value\n        node.insert()\n        this.remove(smallestRight.value, node.right)\n      }\n    }\n\n    if (node.value > value) {\n      this.remove(value, node.left)\n    } else {\n      this.remove(value, node.right)\n    }\n  }\n\n  //Delete helper functions\n  deleteOneChild(node: Node) {\n    let child\n\n    if (node.left.isNull) {\n      child = node.right\n    } else {\n      child = node.left\n    }\n    this.replaceChild(child, node)\n    if (node.color === BLACK) {\n      if (child.color === RED) {\n        child.color = BLACK\n        child.insert()\n      } else this.deleteCase1(child)\n    }\n  }\n\n  //All cases\n  deleteCase1(node: Node) {\n    if (node.parent === null) {\n      this.root = node\n      if (!this.root.isNull) this.root.insert()\n      return\n    }\n    this.deleteCase2(node)\n  }\n\n  deleteCase2(node: Node) {\n    const sibling = this.siblingOf(node)\n    if (sibling.color === RED) {\n      if (sibling.parent.left === sibling)\n        this.rotateRight(sibling as Node, true)\n      else this.rotateLeft(sibling as Node, true)\n      if (sibling.parent === null) this.root = sibling\n    }\n    this.deleteCase3(node)\n  }\n\n  deleteCase3(node: Node) {\n    const sibling = this.siblingOf(node)\n    if (\n      node.parent.color === BLACK &&\n      sibling.color === BLACK &&\n      sibling.left.color === BLACK &&\n      sibling.right.color === BLACK\n    ) {\n      sibling.color = RED\n      this.deleteCase1(node.parent)\n    } else {\n      this.deleteCase4(node)\n    }\n  }\n\n  deleteCase4(node: Node) {\n    const sibling = this.siblingOf(node)\n    if (\n      node.parent.color === RED &&\n      sibling.color === BLACK &&\n      sibling.left.color === BLACK &&\n      sibling.right.color === BLACK\n    ) {\n      sibling.color = RED\n      node.parent.color = BLACK\n      return\n    } else {\n      this.deleteCase5(node)\n    }\n  }\n\n  deleteCase5(node: Node) {\n    const sibling = this.siblingOf(node)\n    if (sibling.color === BLACK) {\n      if (\n        node.parent.left === node &&\n        sibling.right.color === BLACK &&\n        sibling.left.color === RED\n      ) {\n        this.rotateRight(sibling.left as Node, true)\n        sibling.insert()\n      } else if (\n        node.parent.right === node &&\n        sibling.left.color === BLACK &&\n        sibling.right.color === RED\n      ) {\n        this.rotateLeft(sibling.right as Node, true)\n        sibling.insert()\n      }\n    }\n    this.deleteCase6(node)\n  }\n\n  deleteCase6(node: Node) {\n    const sibling = this.siblingOf(node)\n    sibling.color = sibling.parent.color\n    sibling.parent.color = BLACK\n    if (node.parent.left === node) {\n      sibling.right.color = BLACK\n      this.rotateLeft(sibling as Node, false)\n      if (!sibling.right.isNull) sibling.right.insert()\n      if (!sibling.left.isNull) sibling.left.insert()\n    } else {\n      sibling.left.color = BLACK\n      this.rotateRight(sibling as Node, false)\n      if (!sibling.right.isNull) sibling.right.insert()\n      if (!sibling.left.isNull) sibling.left.insert()\n    }\n    if (sibling.parent === null) {\n      this.root = sibling\n    }\n  }\n\n  replaceChild(child: Node, node: Node) {\n    child.parent = node.parent\n    if (node.parent === null) this.root = child\n    else {\n      if (node.parent.left === node) {\n        node.parent.left = child\n      } else {\n        node.parent.right = child\n      }\n    }\n  }\n\n  //Tree Traversal\n  preorder(list: number[], node = this.root) {\n    if (!node.isNull) {\n      list.push(node.value)\n      this.preorder(list, node.left)\n      this.preorder(list, node.right)\n    }\n  }\n\n  inorder(list: number[], node = this.root) {\n    if (!node.isNull) {\n      this.inorder(list, node.left)\n      list.push(node.value)\n      this.inorder(list, node.right)\n    }\n  }\n\n  postorder(list: number[], node = this.root) {\n    if (!node.isNull) {\n      this.postorder(list, node.left)\n      this.postorder(list, node.right)\n      list.push(node.value)\n    }\n  }\n\n  //Search\n  search(value: number, node = this.root) {\n    this.clearHighlight()\n\n    if (node.isNull) return false\n    else if (node.value === value) {\n      node.addHighlight()\n      this.highlighted = node as Node\n      return true\n    } else if (node.value > value) return this.search(value, node.left)\n    else return this.search(value, node.right)\n  }\n\n  //Random Tree generator\n  generateRandomBST(num: number) {\n    const upper = 0\n    const lower = num * 2 + 10\n    const elements = new Set()\n\n    for (let i = 0; i < num; i++) {\n      let value = Math.floor(Math.random() * (upper - lower + 1)) + lower\n      while (elements.has(value)) {\n        value = Math.floor(Math.random() * (upper - lower + 1)) + lower\n      }\n      elements.add(value)\n      this.insert(value)\n    }\n  }\n\n  //BST Checker\n  //Main Checker function\n  checkBinaryTree() {\n    const BSTTypeList = []\n    if (this.isBalanced()) {\n      BSTTypeList.push(BALANCED)\n    }\n    if (this.isComplete()) {\n      BSTTypeList.push(COMPLETE)\n    }\n    if (this.isPerfect()) {\n      BSTTypeList.push(PERFECT)\n    }\n    if (this.isFull()) {\n      BSTTypeList.push(FULL)\n    }\n    return BSTTypeList\n  }\n\n  //Subfunctions\n  //balance\n  isBalanced(node = this.root) {\n    if (node.isNull) return true\n    const leftH = this.height(node.left)\n    const rightH = this.height(node.right)\n    if (Math.abs(leftH - rightH) <= 1) {\n      return this.isBalanced(node.left) && this.isBalanced(node.right)\n    } else {\n      return false\n    }\n  }\n\n  //Find height\n  height(node = this.root) {\n    if (node.isNull) return -1\n    let ans: number\n    ans = this.height(node.left)\n    ans = Math.max(this.height(node.right), ans)\n    return ans + 1\n  }\n\n  //complete\n  isComplete() {\n    const totalNodes = this.countNodes()\n    return this.isComplete2(0, totalNodes)\n  }\n  isComplete2(index: number, totalNodes: number, node = this.root) {\n    if (node.isNull) return true\n    else if (index >= totalNodes) return false\n    else {\n      let ans = this.isComplete2(index * 2 + 1, totalNodes, node.left)\n      ans &= this.isComplete2(index * 2 + 2, totalNodes, node.right)\n      return ans\n    }\n  }\n\n  //perfect EDITED\n  isPerfect() {\n    if (!this.isFull() || !this.isComplete()) return false\n    return this.isPerfect2()\n  }\n\n  isPerfect2(node = this.root, depth = 0) {\n    if (node.isNull) return true\n    depth++\n    if (node.right.isNull && node.left.isNull) {\n      if (this.leafDepth !== -1 && this.leafDepth !== depth) return false\n      this.leafDepth = depth\n    }\n    return (\n      this.isPerfect2(node.left, depth) && this.isPerfect2(node.right, depth)\n    )\n  }\n\n  //full\n  isFull(node = this.root) {\n    if (node.isNull) return true\n    else if (node.left.isNull && node.right.isNull) return true\n    else if (!node.left.isNull && !node.right.isNull) {\n      let ans\n      ans = this.isFull(node.left)\n      ans &= this.isFull(node.right)\n      return ans\n    } else return false\n  }\n\n  countNodes(node = this.root) {\n    if (node.isNull) return 0\n    return this.countNodes(node.left) + 1 + this.countNodes(node.right)\n  }\n\n  //Clears highlight of previously searched nodes\n  clearHighlight() {\n    if (this.highlighted) {\n      this.highlighted.clearHighlight()\n      this.highlighted = null\n    }\n  }\n}\n\nexport default RBT\n","import useTreeState from '../hooks/useTreeState'\nimport {\n  BinaryTreeCheckType,\n  SelfBalancingTreeRefType,\n  TraversalOrderType,\n  TreeStylesType,\n} from '../types'\nimport RBTree from '../data-structures/RedBlackTree'\nimport useTreeStyle from '../hooks/useTreeStyle'\nimport React, { forwardRef, useEffect, useImperativeHandle } from 'react'\nimport { TREE_ID } from '../constants'\nimport { compareArray } from '../util'\n\ntype RedBlackTreeProps = {\n  data?: number[]\n  treeStyles?: TreeStylesType\n}\n\nconst RedBlackTree: React.ForwardRefRenderFunction<\n  SelfBalancingTreeRefType,\n  RedBlackTreeProps\n> = (\n  { data, treeStyles }: RedBlackTreeProps,\n  ref: React.MutableRefObject<SelfBalancingTreeRefType>,\n) => {\n  const { tree, treeJSX, setTree } = useTreeState<RBTree>(null)\n  useTreeStyle(treeStyles)\n\n  useImperativeHandle(ref, () => ({\n    insert: (value: number) => {\n      // if tree is empty\n      if (!tree?.root) {\n        const newTree = new RBTree()\n        newTree.insert(value)\n        setTree(newTree)\n        return\n      }\n\n      tree.insert(value)\n      setTree(tree)\n    },\n    remove: (value: number): boolean => {\n      if (!tree?.root) return false\n\n      if (!tree.search(value)) return false\n      tree.remove(value)\n      setTree(tree.root ? tree : null)\n      return true\n    },\n    search: (value: number): boolean => {\n      if (!tree?.root) return false\n      const foundNode = tree.search(value)\n      if (foundNode) setTree(tree)\n      return foundNode\n    },\n    getData: (traversalOrder: TraversalOrderType): number[] => {\n      const traversalData = []\n      tree[traversalOrder](traversalData)\n      return traversalData\n    },\n    clear: () => {\n      setTree(new RBTree())\n    },\n    generateRandomTree: (countOfNodes: number) => {\n      const newTree = new RBTree(countOfNodes)\n      setTree(newTree)\n    },\n    checkTreeType: (): BinaryTreeCheckType[] => {\n      return tree.checkBinaryTree()\n    },\n  }))\n\n  const handleData = () => {\n    const newTree = new RBTree()\n    data.forEach((elem) => newTree.insert(elem))\n    setTree(newTree)\n  }\n\n  useEffect(() => {\n    if (data) handleData()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data])\n\n  return (\n    <div id={TREE_ID}>\n      <ul>{treeJSX}</ul>\n    </div>\n  )\n}\n\n// returns true if data has changed\nconst compareRedBlackTree = (\n  previousPros: RedBlackTreeProps,\n  newProps: RedBlackTreeProps,\n) =>\n  previousPros.data &&\n  newProps.data &&\n  compareArray(previousPros.data, newProps.data)\n\nexport default React.memo(forwardRef(RedBlackTree), compareRedBlackTree)\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import React from 'react'\n\nclass Heap {\n  end: number\n  heap: number[]\n  currentJSX: JSX.Element\n  constructor(num = 0) {\n    this.end = 0\n    this.heap = []\n    this.currentJSX = null\n    if (num) {\n      this.generateRandomHeap(num)\n    }\n  }\n\n  heapifyUp(j: number) {\n    console.error(j + \": Base class's heapifyUp called\")\n  }\n  heapifyDown(j = 0) {\n    console.error(j + \": Base class's heapifyDown called\")\n  }\n\n  //Checks if heap is empty\n  isEmpty() {\n    return this.end === 0\n  }\n\n  //inserts a new value into the heap\n  insert(value: number) {\n    this.heap[this.end] = value\n    this.heapifyUp(this.end++)\n    this.currentJSX = this.updateJSX()\n  }\n\n  //Extracts the top value\n  removeTop() {\n    if (this.isEmpty()) return null\n    const poppedTopElement = this.heap[0]\n    this.heap[0] = this.heap[--this.end]\n    this.heapifyDown()\n    this.heap.pop()\n    this.currentJSX = this.updateJSX()\n\n    return poppedTopElement\n  }\n\n  //Deletes a specified value\n  deleteEl(value: number, isMinHeap = true) {\n    const index = this.heap.indexOf(value)\n    if (index === -1) return\n    this.heap[index] = isMinHeap\n      ? Number.NEGATIVE_INFINITY\n      : Number.POSITIVE_INFINITY\n    this.heapifyUp(index)\n    this.removeTop()\n  }\n\n  //Updates the whole JSX\n  updateJSX(parentIndex = 0) {\n    if (!this.end) return null\n    const child1Index = 2 * parentIndex + 1\n    const child2Index = child1Index + 1\n\n    if (child2Index >= this.end && child1Index >= this.end) {\n      return (\n        <li key={parentIndex}>\n          <div className=\"normal\">{this.heap[parentIndex]}</div>\n          <ul>\n            <li className=\"null\">\n              <div className=\"null\">null</div>\n            </li>\n            <li className=\"null\">\n              <div className=\"null\">null</div>\n            </li>\n          </ul>\n        </li>\n      )\n    } else if (child2Index >= this.end && child1Index < this.end) {\n      const child1JSX = this.updateJSX(child1Index)\n      return (\n        <li key={parentIndex}>\n          <div className=\"normal\">{this.heap[parentIndex]}</div>\n          <ul>\n            {child1JSX}\n            <li className=\"null\">\n              <div className=\"null\">null</div>\n            </li>\n          </ul>\n        </li>\n      )\n    } else if (child2Index < this.end && child1Index >= this.end) {\n      const child2JSX = this.updateJSX(child2Index)\n      return (\n        <li key={parentIndex}>\n          <div className=\"normal\">{this.heap[parentIndex]}</div>\n          <ul>\n            <li className=\"null\">\n              <div className=\"null\">null</div>\n            </li>\n            {child2JSX}\n          </ul>\n        </li>\n      )\n    } else {\n      const child1JSX = this.updateJSX(child1Index)\n      const child2JSX = this.updateJSX(child2Index)\n      return (\n        <li key={parentIndex}>\n          <div className=\"normal\">{this.heap[parentIndex]}</div>\n          <ul>\n            {child1JSX}\n            {child2JSX}\n          </ul>\n        </li>\n      )\n    }\n  }\n\n  //inserts num random values\n  generateRandomHeap(num: number) {\n    const upper = 0\n    const lower = num * 2 + 10\n    const elements = new Set()\n    for (let i = 0; i < num; i++) {\n      let value = Math.floor(Math.random() * (upper - lower + 1)) + lower\n      while (elements.has(value)) {\n        value = Math.floor(Math.random() * (upper - lower + 1)) + lower\n      }\n      elements.add(value)\n      this.insert(value)\n    }\n  }\n}\n\nexport class MinHeap extends Heap {\n  //Helper functions\n  heapifyUp(childIndex: number) {\n    if (childIndex === 0) return\n    let parentIndex = childIndex\n    if (parentIndex % 2 === 0) parentIndex -= 2\n    else parentIndex--\n    parentIndex /= 2\n    if (this.heap[parentIndex] > this.heap[childIndex]) {\n      ;[this.heap[parentIndex], this.heap[childIndex]] = [\n        this.heap[childIndex],\n        this.heap[parentIndex],\n      ]\n      this.heapifyUp(parentIndex)\n    }\n  }\n\n  heapifyDown(parentIndex = 0) {\n    const child1Index = 2 * parentIndex + 1\n    const child2Index = child1Index + 1\n\n    if (child2Index >= this.end && child1Index >= this.end) return\n    else if (child2Index >= this.end && child1Index < this.end) {\n      if (this.heap[child1Index] < this.heap[parentIndex]) {\n        ;[this.heap[parentIndex], this.heap[child1Index]] = [\n          this.heap[child1Index],\n          this.heap[parentIndex],\n        ]\n        this.heapifyDown(child1Index)\n      }\n    } else if (child2Index < this.end && child1Index >= this.end) {\n      if (this.heap[child2Index] < this.heap[parentIndex]) {\n        ;[this.heap[parentIndex], this.heap[child2Index]] = [\n          this.heap[child2Index],\n          this.heap[parentIndex],\n        ]\n        this.heapifyDown(child2Index)\n      }\n    } else {\n      if (\n        this.heap[parentIndex] > this.heap[child1Index] ||\n        this.heap[parentIndex] > this.heap[child2Index]\n      ) {\n        if (this.heap[child1Index] < this.heap[child2Index]) {\n          ;[this.heap[parentIndex], this.heap[child1Index]] = [\n            this.heap[child1Index],\n            this.heap[parentIndex],\n          ]\n          this.heapifyDown(child1Index)\n        } else {\n          ;[this.heap[parentIndex], this.heap[child2Index]] = [\n            this.heap[child2Index],\n            this.heap[parentIndex],\n          ]\n          this.heapifyDown(child2Index)\n        }\n      }\n    }\n  }\n\n  remove(value: number) {\n    return this.deleteEl(value)\n  }\n}\n\nexport class MaxHeap extends Heap {\n  //Helper Functions\n  heapifyUp(childIndex: number) {\n    if (childIndex === 0) return\n    let parentIndex = childIndex\n    if (parentIndex % 2 === 0) parentIndex -= 2\n    else parentIndex--\n    parentIndex /= 2\n    if (this.heap[parentIndex] < this.heap[childIndex]) {\n      ;[this.heap[parentIndex], this.heap[childIndex]] = [\n        this.heap[childIndex],\n        this.heap[parentIndex],\n      ]\n      this.heapifyUp(parentIndex)\n    }\n  }\n\n  heapifyDown(parentIndex = 0) {\n    const child1Index = 2 * parentIndex + 1\n    const child2Index = child1Index + 1\n\n    if (child2Index >= this.end && child1Index >= this.end) return\n    else if (child2Index >= this.end && child1Index < this.end) {\n      if (this.heap[child1Index] > this.heap[parentIndex]) {\n        ;[this.heap[parentIndex], this.heap[child1Index]] = [\n          this.heap[child1Index],\n          this.heap[parentIndex],\n        ]\n        this.heapifyDown(child1Index)\n      }\n    } else if (child2Index < this.end && child1Index >= this.end) {\n      if (this.heap[child2Index] > this.heap[parentIndex]) {\n        ;[this.heap[parentIndex], this.heap[child2Index]] = [\n          this.heap[child2Index],\n          this.heap[parentIndex],\n        ]\n        this.heapifyDown(child2Index)\n      }\n    } else {\n      if (\n        this.heap[parentIndex] < this.heap[child1Index] ||\n        this.heap[parentIndex] < this.heap[child2Index]\n      ) {\n        if (this.heap[child1Index] > this.heap[child2Index]) {\n          ;[this.heap[parentIndex], this.heap[child1Index]] = [\n            this.heap[child1Index],\n            this.heap[parentIndex],\n          ]\n          this.heapifyDown(child1Index)\n        } else {\n          ;[this.heap[parentIndex], this.heap[child2Index]] = [\n            this.heap[child2Index],\n            this.heap[parentIndex],\n          ]\n          this.heapifyDown(child2Index)\n        }\n      }\n    }\n  }\n  remove(value: number) {\n    return this.deleteEl(value, false)\n  }\n}\n","import React, { forwardRef, useEffect, useImperativeHandle } from 'react'\nimport { TREE_ID } from '../constants'\nimport { MinHeap as MinHeapDataStructure } from '../data-structures/Heap'\nimport useTreeState from '../hooks/useTreeState'\nimport useTreeStyle from '../hooks/useTreeStyle'\nimport { HeapRefType, TreeStylesType } from '../types'\nimport { compareArray } from '../util'\n\ntype HeapProps = {\n  data?: number[]\n  treeStyles?: TreeStylesType\n}\n\nconst MinHeap: React.ForwardRefRenderFunction<HeapRefType, HeapProps> = (\n  { data, treeStyles }: HeapProps,\n  ref: React.MutableRefObject<HeapRefType>,\n) => {\n  const { tree, treeJSX, setTree } = useTreeState<MinHeapDataStructure>(null)\n  useTreeStyle(treeStyles)\n\n  useImperativeHandle(ref, () => ({\n    insert: (value: number) => {\n      // if tree is empty\n      if (tree?.isEmpty()) {\n        const newTree = new MinHeapDataStructure()\n        newTree.insert(value)\n        setTree(newTree)\n        return\n      }\n\n      tree.insert(value)\n      setTree(tree)\n    },\n    remove: (value: number): boolean => {\n      if (tree?.isEmpty()) return false\n      tree.remove(value)\n      setTree(tree)\n      return true\n    },\n    getData: (): number[] => {\n      return tree.heap\n    },\n    clear: () => {\n      setTree(new MinHeapDataStructure())\n    },\n    generateRandomTree: (countOfNodes: number) => {\n      const newTree = new MinHeapDataStructure(countOfNodes)\n      setTree(newTree)\n    },\n    extractTop: () => {\n      const top = tree.removeTop()\n      setTree(tree)\n      return top\n    },\n  }))\n\n  const handleData = () => {\n    const newTree = new MinHeapDataStructure()\n    data.forEach((elem) => newTree.insert(elem))\n    setTree(newTree)\n  }\n\n  useEffect(() => {\n    if (data) handleData()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data])\n\n  return (\n    <div id={TREE_ID}>\n      <ul>{treeJSX}</ul>\n    </div>\n  )\n}\n\n// returns true if data has changed\nconst compareHeap = (previousPros: HeapProps, newProps: HeapProps) =>\n  previousPros.data &&\n  newProps.data &&\n  compareArray(previousPros.data, newProps.data)\n\nexport default React.memo(forwardRef(MinHeap), compareHeap)\n","import React, { forwardRef, useEffect, useImperativeHandle } from 'react'\nimport { TREE_ID } from '../constants'\nimport { MaxHeap as MaxHeapDataStructure } from '../data-structures/Heap'\nimport useTreeState from '../hooks/useTreeState'\nimport useTreeStyle from '../hooks/useTreeStyle'\nimport { HeapRefType, TreeStylesType } from '../types'\nimport { compareArray } from '../util'\n\ntype HeapProps = {\n  data?: number[]\n  treeStyles?: TreeStylesType\n}\n\nconst MaxHeap: React.ForwardRefRenderFunction<HeapRefType, HeapProps> = (\n  { data, treeStyles }: HeapProps,\n  ref: React.MutableRefObject<HeapRefType>,\n) => {\n  const { tree, treeJSX, setTree } = useTreeState<MaxHeapDataStructure>(null)\n  useTreeStyle(treeStyles)\n\n  useImperativeHandle(ref, () => ({\n    insert: (value: number) => {\n      // if tree is empty\n      if (tree?.isEmpty()) {\n        const newTree = new MaxHeapDataStructure()\n        newTree.insert(value)\n        setTree(newTree)\n        return\n      }\n\n      tree.insert(value)\n      setTree(tree)\n    },\n    remove: (value: number): boolean => {\n      if (tree?.isEmpty()) return false\n      tree.remove(value)\n      setTree(tree)\n      return true\n    },\n    getData: (): number[] => {\n      return tree.heap\n    },\n    clear: () => {\n      setTree(new MaxHeapDataStructure())\n    },\n    generateRandomTree: (countOfNodes: number) => {\n      const newTree = new MaxHeapDataStructure(countOfNodes)\n      setTree(newTree)\n    },\n    extractTop: () => {\n      const top = tree.removeTop()\n      setTree(tree)\n      return top\n    },\n  }))\n\n  const handleData = () => {\n    const newTree = new MaxHeapDataStructure()\n    data.forEach((elem) => newTree.insert(elem))\n    setTree(newTree)\n  }\n\n  useEffect(() => {\n    if (data) handleData()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data])\n\n  return (\n    <div id={TREE_ID}>\n      <ul>{treeJSX}</ul>\n    </div>\n  )\n}\n\n// returns true if data has changed\nconst compareHeap = (previousPros: HeapProps, newProps: HeapProps) =>\n  previousPros.data &&\n  newProps.data &&\n  compareArray(previousPros.data, newProps.data)\n\nexport default React.memo(forwardRef(MaxHeap), compareHeap)\n","import React, { useEffect, useRef, useState } from 'react'\nimport {\n  SelfBalancingTreeRefType,\n  CheckTreeTypeFunctionType,\n  ClearFunctionType,\n  GenerateRandomTreeFunctionType,\n  GetDataFunctionType,\n  InsertFunctionType,\n  RemoveFunctionType,\n  SearchFunctionType,\n  TraversalOrderType,\n} from '../types'\n\ntype UseTreeReturnType = {\n  ref: React.MutableRefObject<SelfBalancingTreeRefType>\n  insert: InsertFunctionType\n  remove: RemoveFunctionType\n  search: SearchFunctionType\n  getData: GetDataFunctionType\n  clear: ClearFunctionType\n  generateRandomTree: GenerateRandomTreeFunctionType\n  checkTreeType: CheckTreeTypeFunctionType\n}\n\nconst useSelfBalancingTree = (): UseTreeReturnType => {\n  const ref = useRef<SelfBalancingTreeRefType>(null)\n  const [insertFunction, setInsertFunction] = useState<InsertFunctionType>(null)\n  const [removeFunction, setRemoveFunction] = useState<RemoveFunctionType>(null)\n  const [searchFunction, setSearchFunction] = useState<SearchFunctionType>(null)\n  const [getDataFunction, setGetDataFunction] =\n    useState<GetDataFunctionType>(null)\n  const [clearFunction, setClearFunction] = useState<ClearFunctionType>(null)\n  const [generateRandomTreeFunction, setGenerateRandomTreeFunction] =\n    useState<GenerateRandomTreeFunctionType>(null)\n  const [checkTreeTypeFunction, setCheckTreeTypeFunction] =\n    useState<CheckTreeTypeFunctionType>(null)\n\n  useEffect(() => {\n    setInsertFunction(() => (value: number) => ref?.current?.insert(value))\n    setRemoveFunction(() => (value: number) => ref?.current?.remove(value))\n    setSearchFunction(() => (value: number) => ref?.current?.search(value))\n    setGetDataFunction(\n      () => (traversalOrder: TraversalOrderType) =>\n        ref?.current?.getData(traversalOrder),\n    )\n    setClearFunction(() => () => ref?.current?.clear())\n    setGenerateRandomTreeFunction(\n      () => (countOfNodes: number) =>\n        ref?.current?.generateRandomTree(countOfNodes),\n    )\n    setCheckTreeTypeFunction(() => () => ref?.current?.checkTreeType())\n  }, [ref])\n\n  return {\n    ref,\n    insert: insertFunction,\n    remove: removeFunction,\n    search: searchFunction,\n    getData: getDataFunction,\n    clear: clearFunction,\n    generateRandomTree: generateRandomTreeFunction,\n    checkTreeType: checkTreeTypeFunction,\n  }\n}\n\nexport default useSelfBalancingTree\n","import React, { useEffect, useRef, useState } from 'react'\nimport {\n  BalanceFunctionType,\n  BinaryTreeRefType,\n  CheckTreeTypeFunctionType,\n  ClearFunctionType,\n  GenerateRandomTreeFunctionType,\n  GetDataFunctionType,\n  InsertFunctionType,\n  RemoveFunctionType,\n  SearchFunctionType,\n  TraversalOrderType,\n} from '../types'\n\ntype UseTreeReturnType = {\n  ref: React.MutableRefObject<BinaryTreeRefType>\n  insert: InsertFunctionType\n  remove: RemoveFunctionType\n  search: SearchFunctionType\n  getData: GetDataFunctionType\n  clear: ClearFunctionType\n  balance: BalanceFunctionType\n  generateRandomTree: GenerateRandomTreeFunctionType\n  checkTreeType: CheckTreeTypeFunctionType\n}\n\nconst useBinarySearchTree = (): UseTreeReturnType => {\n  const ref = useRef<BinaryTreeRefType>(null)\n  const [insertFunction, setInsertFunction] = useState<InsertFunctionType>(null)\n  const [removeFunction, setRemoveFunction] = useState<RemoveFunctionType>(null)\n  const [searchFunction, setSearchFunction] = useState<SearchFunctionType>(null)\n  const [getDataFunction, setGetDataFunction] =\n    useState<GetDataFunctionType>(null)\n  const [clearFunction, setClearFunction] = useState<ClearFunctionType>(null)\n  const [balanceFunction, setBalanceFunction] =\n    useState<BalanceFunctionType>(null)\n  const [generateRandomTreeFunction, setGenerateRandomTreeFunction] =\n    useState<GenerateRandomTreeFunctionType>(null)\n  const [checkTreeTypeFunction, setCheckTreeTypeFunction] =\n    useState<CheckTreeTypeFunctionType>(null)\n\n  useEffect(() => {\n    setInsertFunction(() => (value: number) => ref?.current?.insert(value))\n    setRemoveFunction(() => (value: number) => ref?.current?.remove(value))\n    setSearchFunction(() => (value: number) => ref?.current?.search(value))\n    setGetDataFunction(\n      () => (traversalOrder: TraversalOrderType) =>\n        ref?.current?.getData(traversalOrder),\n    )\n    setClearFunction(() => () => ref?.current?.clear())\n    setBalanceFunction(() => () => ref?.current?.balance())\n    setGenerateRandomTreeFunction(\n      () => (countOfNodes: number) =>\n        ref?.current?.generateRandomTree(countOfNodes),\n    )\n    setCheckTreeTypeFunction(() => () => ref?.current?.checkTreeType())\n  }, [ref])\n\n  return {\n    ref,\n    insert: insertFunction,\n    remove: removeFunction,\n    search: searchFunction,\n    getData: getDataFunction,\n    clear: clearFunction,\n    balance: balanceFunction,\n    generateRandomTree: generateRandomTreeFunction,\n    checkTreeType: checkTreeTypeFunction,\n  }\n}\n\nexport default useBinarySearchTree\n","import React, { useEffect, useRef, useState } from 'react'\nimport {\n  ClearFunctionType,\n  ExtractTopFunctionType,\n  GenerateRandomTreeFunctionType,\n  GetHeapDataFunctionType,\n  HeapRefType,\n  InsertFunctionType,\n  RemoveFunctionType,\n} from '../types'\n\ntype UseTreeReturnType = {\n  ref: React.MutableRefObject<HeapRefType>\n  insert: InsertFunctionType\n  remove: RemoveFunctionType\n  getData: GetHeapDataFunctionType\n  clear: ClearFunctionType\n  generateRandomTree: GenerateRandomTreeFunctionType\n  extractTop: ExtractTopFunctionType\n}\n\nconst useHeap = (): UseTreeReturnType => {\n  const ref = useRef<HeapRefType>(null)\n  const [insertFunction, setInsertFunction] = useState<InsertFunctionType>(null)\n  const [removeFunction, setRemoveFunction] = useState<RemoveFunctionType>(null)\n  const [clearFunction, setClearFunction] = useState<ClearFunctionType>(null)\n  const [generateRandomTreeFunction, setGenerateRandomTreeFunction] =\n    useState<GenerateRandomTreeFunctionType>(null)\n  const [extractTopFunction, setExtractTopFunction] =\n    useState<ExtractTopFunctionType>(null)\n  const [getDataFunction, setGetDataFunction] =\n    useState<GetHeapDataFunctionType>(null)\n\n  useEffect(() => {\n    setInsertFunction(() => (value: number) => ref?.current?.insert(value))\n    setRemoveFunction(() => (value: number) => ref?.current?.remove(value))\n    setClearFunction(() => () => ref?.current?.clear())\n    setGenerateRandomTreeFunction(\n      () => (countOfNodes: number) =>\n        ref?.current?.generateRandomTree(countOfNodes),\n    )\n    setExtractTopFunction(() => () => ref?.current?.extractTop())\n    setGetDataFunction(() => () => ref?.current?.getData())\n  }, [ref])\n\n  return {\n    ref,\n    insert: insertFunction,\n    remove: removeFunction,\n    clear: clearFunction,\n    generateRandomTree: generateRandomTreeFunction,\n    extractTop: extractTopFunction,\n    getData: getDataFunction,\n  }\n}\n\nexport default useHeap\n","import { MutableRefObject, useEffect, useRef, useState } from 'react'\nimport {\n  GenerateRandomTrieFunctionType,\n  GetAllWordsFunctionTrieType,\n  InsertFunctionTrieType,\n  RemoveFunctionTrieType,\n  RemoveHighlightTrieFunctionType,\n  SearchFunctionTrieType,\n  SearchPrefixFunctionTrieType,\n  TrieRefType,\n} from '../types'\n\ntype ReturnType = {\n  ref: MutableRefObject<TrieRefType>\n  insert: InsertFunctionTrieType\n  remove: RemoveFunctionTrieType\n  search: SearchFunctionTrieType\n  searchPrefix: SearchPrefixFunctionTrieType\n  getAllWords: GetAllWordsFunctionTrieType\n  generateRandomTrie: GenerateRandomTrieFunctionType\n  removeHighlight: RemoveHighlightTrieFunctionType\n}\n\nconst useTrie = (): ReturnType => {\n  const ref = useRef<TrieRefType>(null)\n  const [insert, setInsert] = useState<InsertFunctionTrieType>(null)\n  const [remove, setRemove] = useState<RemoveFunctionTrieType>(null)\n  const [search, setSearch] = useState<SearchFunctionTrieType>(null)\n  const [searchPrefix, setSearchPrefix] =\n    useState<SearchPrefixFunctionTrieType>(null)\n  const [getAllWords, setGetAllWords] =\n    useState<GetAllWordsFunctionTrieType>(null)\n  const [generateRandomTrie, setGenerateRandomTrie] =\n    useState<GenerateRandomTrieFunctionType>(null)\n  const [removeHighlight, setRemoveHighlight] =\n    useState<RemoveHighlightTrieFunctionType>(null)\n\n  useEffect(() => {\n    setInsert(() => (word: string) => ref?.current?.insert(word))\n    setRemove(() => (word: string) => ref?.current?.remove(word))\n    setSearch(() => (word: string) => ref?.current?.search(word))\n    setSearchPrefix(() => (word: string) => ref?.current?.searchPrefix(word))\n    setGetAllWords(() => () => ref?.current?.getAllWords())\n    setGenerateRandomTrie(\n      () => (num: number) => ref?.current?.generateRandomTrie(num),\n    )\n    setRemoveHighlight(() => () => ref?.current?.removeHighlight())\n  }, [ref])\n\n  return {\n    ref,\n    insert,\n    generateRandomTrie,\n    getAllWords,\n    remove,\n    search,\n    searchPrefix,\n    removeHighlight,\n  }\n}\n\nexport default useTrie\n"],"names":["BINARY_TREE_TYPE","TREE_ID","CSS_VARIABLE_MAP","lineColor","variableName","defaultValue","description","lineHoverColor","lineRadius","nodeBorder","nodeBorderRadius","nodeBackgroundColor","nodeFontColor","nodeShadow","nodeTextShadow","nodeFontSize","nodeFontFamily","nodeAvlHeightFontSize","nodeRedBackgroundColor","nodeBlackBackgroundColor","nodeHighlightBorder","nodeHighlightBackgroundColor","nodeHighlightFontColor","nodeHighlightShadow","nodeHighlightTextShadow","nodeHoverBorder","nodeHoverBackgroundColor","nodeHoverFontColor","nodeHoverShadow","nodeHoverTextShadow","nodeNullFontColor","nodeNullHoverFontColor","transitionDuration","NULL_NODE_JSX","React","className","getNormalNodeJSX","value","leftJSX","rightJSX","isHighlighted","key","this","left","right","parent","currentJSX","Node","node","isLeft","newJSX","setJSX","updateRootJSX","insert","isLeftChild","childrenCondtion","setChildToChildsChild","setChildToNull","num","root","generateRandomBST","highlightedNode","leafDepth","BST","clearHighlight","newNode","insertNode","findMax","findMin","removeNode","remove","minNodeOfRight","updateValue","ans","height","Math","max","countNodes","list","push","preorder","inorder","postorder","addHighlight","search","lower","elements","Set","i","floor","random","has","add","BALANCED","COMPLETE","FULL","PERFECT","BSTTypeList","isBalanced","isComplete","isPerfect","isFull","leftHeight","rightHeight","abs","totalNodes","isComplete2","index","isPerfect2","depth","nodes","BSTToArr","length","makeBST","start","end","mid","useTreeState","treeObject","_b","useState","tree","setTreeInternal","_c","treeJSX","setTreeJSX","setTree","newTreeObject","useTreeStyle","treeStyles","useEffect","_a","Object","entries","_i","style","document","getElementById","setProperty","handleStyles","css","ref","insertAt","head","getElementsByTagName","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","compareArray","array1","array2","memo","forwardRef","data","useImperativeHandle","newTree","foundNode","getData","traversalOrder","traversalData","clear","balance","generateRandomTree","countOfNodes","checkTreeType","checkBST","forEach","elem","id","previousPros","newProps","words","isEnd","children","childrenJSX","nodeTrie","isAddHighlight","keys","updateJSX","highlightedTill","randomTrie","Trie","word","trim","toUpperCase","searchWord","removeHighligt","allWords","findAllWordsHelper","indexOfWordsAdded","trieFunctions","TrieDataStructure","deleteWord","findPrefix","searchPrefix","isPrefixFound","getAllWords","findAllWords","generateRandomTrie","wordCount","newTrie","removeHighlight","balanceJSX","AVL","tempNode","setHeight","balanceCheck","rotateLeft","rotateRight","leftH","rightH","checkAVL","color","isNull","NullNode","newNullNode","setHtml","updateRootHtml","highlighted","RBT","toRecolor","sibling","siblingOf","tempParent","deleteOneChild","smallestRight","child","replaceChild","deleteCase1","deleteCase2","deleteCase3","deleteCase4","deleteCase5","deleteCase6","RBTree","checkBinaryTree","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","constructor","create","heap","generateRandomHeap","Heap","j","console","error","heapifyUp","isEmpty","poppedTopElement","heapifyDown","pop","isMinHeap","indexOf","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","removeTop","parentIndex","child1Index","child2Index","child1JSX","child2JSX","MinHeap","childIndex","_d","deleteEl","MaxHeap","MinHeapDataStructure","extractTop","top","MaxHeapDataStructure","useSelfBalancingTree","useRef","insertFunction","setInsertFunction","removeFunction","setRemoveFunction","searchFunction","setSearchFunction","getDataFunction","setGetDataFunction","_e","clearFunction","setClearFunction","_f","generateRandomTreeFunction","setGenerateRandomTreeFunction","_g","checkTreeTypeFunction","setCheckTreeTypeFunction","current","balanceFunction","setBalanceFunction","_h","extractTopFunction","setExtractTopFunction","setInsert","setRemove","setSearch","setSearchPrefix","setGetAllWords","setGenerateRandomTrie","setRemoveHighlight"],"mappings":"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ACX8B,EAMFF,IANEE,EAAU,IAAIjG,EACpB+F,EAAKa,SAAQ,SAACC,GAAS,OAAAZ,EAAQ3G,OAAOuH,MACtC9C,EAAQkC,MAMP,CAACF,IAGF5H,+BAAK2I,GAAI5K,GACPiC,kCAAK0F,QAMqB,SAACkD,EAAwBC,GACvD,OAAAD,EAAahB,MACbiB,EAASjB,MACTL,EAAaqB,EAAahB,KAAMiB,EAASjB,SCnGrCkB,EACG,CACL,OACA,UACA,SACA,WACA,SACA,SACA,QACA,SACA,QACA,MACA,SACA,aACA,SACA,SACA,QACA,OACA,QACA,OACA,WACA,SACA,WACA,cACA,UACA,YACA,WACA,QACA,SACA,UACA,OACA,SACA,WACA,SACA,YACA,QACA,SACA,UACA,WACA,QACA,YACA,MACA,SACA,OACA,SACA,SACA,SACA,UACA,OACA,QACA,OACA,WACA,QACA,OACA,QACA,QACA,WACA,QACA,SACA,OACA,MACA,WACA,OACA,WACA,OACA,SACA,OACA,UACA,MACA,WACA,OACA,eACA,SACA,OACA,QACA,QACA,UACA,aACA,UACA,WACA,SACA,aACA,UACA,YACA,UACA,QACA,QACA,SACA,SACA,OACA,UACA,UACA,UACA,MACA,MACA,SACA,SACA,OACA,YACA,WACA,UACA,WACA,UACA,OACA,UACA,UACA,aACA,SACA,MACA,QACA,SACA,OACA,aACA,MACA,OACA,SACA,QACA,SACA,SACA,QACA,QACA,MACA,YACA,SACA,MACA,eACA,SACA,OACA,SACA,WACA,OACA,SACA,SACA,SACA,OACA,UACA,QACA,OACA,WACA,QACA,OACA,WACA,SACA,SACA,SACA,WACA,YACA,YACA,OACA,OACA,WACA,SACA,YACA,UACA,QACA,SACA,YACA,SACA,WACA,SACA,SACA,UACA,MACA,MACA,YACA,QACA,SACA,SACA,SACA,WACA,QACA,QACA,UACA,OACA,UACA,OACA,SACA,QACA,QACA,UACA,OACA,OACA,QACA,cACA,QACA,UACA,OACA,SACA,OACA,QACA,SACA,SACA,OACA,OACA,OACA,MACA,SACA,OACA,UACA,UACA,OACA,OACA,SACA,MACA,QACA,QACA,OACA,YACA,OACA,QACA,QACA,cACA,QACA,WACA,OACA,SACA,UACA,UACA,WACA,SACA,SACA,SACA,QACA,YACA,QACA,YACA,OACA,QACA,WACA,QACA,OACA,OACA,QACA,UACA,UACA,OACA,YACA,MACA,SACA,QACA,QACA,YACA,aACA,SACA,OACA,UACA,YACA,SACA,OACA,OACA,OACA,OACA,QACA,QACA,MACA,SACA,OACA,SACA,SACA,SACA,SACA,WACA,WACA,WACA,QACA,QACA,QACA,YACA,QACA,SACA,QACA,SACA,QACA,OACA,MACA,QACA,SACA,OACA,QACA,aACA,QACA,UACA,aACA,OACA,UACA,WACA,YACA,OACA,SACA,YACA,SACA,QACA,OACA,OACA,SACA,MACA,cACA,QACA,UACA,QACA,UACA,cACA,QACA,WACA,SACA,QACA,QACA,cACA,OACA,SACA,aACA,QACA,OACA,UACA,QACA,WACA,QACA,QACA,QACA,QACA,QACA,SACA,YACA,MACA,QACA,SACA,WACA,QACA,MACA,QACA,WACA,UACA,OACA,YACA,WACA,WACA,QACA,UACA,SACA,QACA,cACA,OACA,SACA,UACA,MACA,QACA,QACA,OACA,QACA,MACA,UACA,SACA,cACA,UACA,UACA,OACA,OACA,WACA,OACA,QACA,OACA,OACA,SACA,SACA,OACA,MACA,QACA,YACA,UACA,SACA,WACA,QACA,QACA,OACA,SACA,WACA,OACA,QACA,YACA,QACA,QACA,QACA,cACA,MACA,UACA,QACA,WACA,QACA,gBACA,SACA,QACA,QACA,QACA,WACA,SACA,QACA,WACA,MACA,OACA,UACA,YACA,SACA,QACA,OACA,SACA,UACA,UACA,OACA,UACA,UACA,MACA,MACA,QACA,QACA,OACA,OACA,QACA,QACA,OACA,MACA,SACA,QACA,OACA,QACA,WACA,WACA,aACA,WACA,WACA,YACA,OACA,MACA,OACA,OACA,QACA,aACA,WACA,aACA,SACA,OACA,SACA,OACA,UACA,aACA,OACA,SACA,YACA,MACA,QACA,WACA,MACA,UACA,QACA,SACA,QACA,OACA,YACA,OACA,OACA,WACA,aACA,SACA,QACA,QACA,WACA,QACA,OACA,OACA,UACA,QACA,UACA,OACA,MACA,OACA,QACA,OACA,UACA,MACA,QACA,UACA,QACA,SACA,YACA,SACA,SACA,MACA,UACA,SACA,QACA,QACA,YACA,YACA,SACA,OACA,QACA,UACA,YACA,WACA,WACA,MACA,YACA,WACA,YACA,OACA,SACA,SACA,MACA,QACA,SACA,OACA,UACA,UACA,UACA,UACA,cACA,OACA,UACA,OACA,WACA,SACA,UACA,OACA,QACA,UACA,OACA,SACA,SACA,UACA,QACA,YACA,QACA,QACA,SACA,WACA,QACA,OACA,WACA,WACA,WACA,WACA,QACA,OACA,YACA,OACA,aACA,YACA,QACA,QACA,QACA,OACA,OACA,YACA,YACA,WACA,YACA,SACA,SACA,MACA,WACA,QACA,OACA,aACA,SACA,UACA,YACA,OACA,SACA,SACA,SACA,cACA,aACA,QACA,OACA,YACA,SACA,SACA,SACA,WACA,OACA,WACA,WACA,SACA,SACA,SACA,aACA,UACA,QACA,OACA,cACA,OACA,WACA,WACA,MACA,QACA,YACA,WACA,OACA,OACA,OACA,UACA,SACA,QACA,QACA,SACA,aACA,OACA,QACA,OACA,SACA,WACA,OACA,UACA,SACA,WACA,QACA,SACA,OACA,SACA,SACA,OACA,MACA,OACA,OACA,YACA,YACA,MACA,WACA,UACA,QACA,OACA,aACA,UACA,UACA,QACA,QACA,SACA,QACA,YACA,UACA,QACA,QACA,WACA,SACA,UACA,SACA,QACA,UACA,WACA,SACA,QACA,QACA,QACA,YACA,QACA,UACA,WACA,SACA,SACA,WACA,OACA,QACA,UACA,WACA,OACA,QACA,SACA,OACA,SACA,OACA,eACA,QACA,MACA,OACA,OACA,SACA,WACA,SACA,OACA,SACA,OACA,SACA,SACA,QACA,UACA,SACA,cACA,OACA,OACA,WACA,OACA,QACA,UACA,YACA,OACA,SACA,OACA,SACA,SACA,UACA,QACA,QACA,QACA,WACA,QACA,OACA,SACA,UACA,OACA,SACA,MACA,UACA,OACA,QACA,QACA,aACA,MACA,UACA,OACA,SACA,OACA,QACA,QACA,WACA,UACA,UACA,SACA,aACA,SACA,QACA,UACA,QACA,OACA,MACA,SACA,OACA,QACA,OACA,SACA,MACA,MACA,QACA,SACA,SACA,OACA,OACA,OACA,SACA,QACA,QACA,QACA,WACA,UACA,aACA,SACA,SACA,QACA,OACA,YACA,YACA,OACA,QACA,aACA,QACA,QACA,SACA,UACA,QACA,UACA,QACA,MACA,OACA,QACA,QACA,QACA,QACA,UACA,SACA,eACA,YACA,QACA,OACA,QACA,UACA,QACA,SACA,QACA,UACA,WACA,YACA,YACA,YACA,SACA,QACA,MACA,OACA,OACA,WACA,OACA,aACA,UACA,YACA,SACA,QACA,cACA,UACA,UACA,MACA,OACA,QACA,OACA,UACA,OACA,QACA,OACA,aACA,UACA,eACA,SACA,UACA,WACA,QACA,QACA,OACA,QACA,YACA,aACA,OACA,UACA,SACA,WACA,MACA,SACA,QACA,SACA,OACA,SACA,QACA,SACA,SACA,eACA,YACA,UACA,QACA,QACA,OACA,OACA,WACA,SACA,YACA,YACA,MACA,UACA,YACA,WACA,MACA,UACA,OACA,YACA,UACA,MACA,aACA,WACA,SACA,WACA,QACA,SACA,UACA,QACA,OACA,OACA,OACA,SACA,UACA,OACA,UACA,OACA,MACA,YACA,OACA,OACA,QACA,WACA,QACA,WACA,SACA,UACA,WACA,QACA,WACA,UACA,YACA,MACA,OACA,UACA,OACA,UACA,WACA,UACA,SACA,MACA,MACA,QACA,SACA,WACA,MACA,MACA,UACA,QACA,UACA,WACA,QACA,OACA,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"}